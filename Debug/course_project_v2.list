
course_project_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e3c  08007e3c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e3c  08007e3c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e3c  08007e3c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000008c  08007ed0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007ed0  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8f9  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000307b  00000000  00000000  0002f9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00032a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b07  00000000  00000000  00033900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197ff  00000000  00000000  00034407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144a1  00000000  00000000  0004dc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086976  00000000  00000000  000620a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f48  00000000  00000000  000e8a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ec968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e44 	.word	0x08006e44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08006e44 	.word	0x08006e44

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <ST7735_Reset>:

static void ST7735_Reset()
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f002 fa37 	bl	80025f8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800018a:	2014      	movs	r0, #20
 800018c:	f001 fe72 	bl	8001e74 <HAL_Delay>
  TFT_RES_H();
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f002 fa2f 	bl	80025f8 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 80001ae:	2200      	movs	r2, #0
 80001b0:	2104      	movs	r1, #4
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f002 fa20 	bl	80025f8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f002 fedd 	bl	8002f80 <HAL_SPI_Transmit>
#endif
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	200000b4 	.word	0x200000b4

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 80001e2:	2201      	movs	r2, #1
 80001e4:	2104      	movs	r1, #4
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f002 fa06 	bl	80025f8 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f002 fec2 	bl	8002f80 <HAL_SPI_Transmit>
#endif
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	200000b4 	.word	0x200000b4

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fdf5 	bl	8001e74 <HAL_Delay>
    while(numCommands--)
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4604      	mov	r4, r0
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4623      	mov	r3, r4
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4603      	mov	r3, r0
 80002b4:	71bb      	strb	r3, [r7, #6]
 80002b6:	460b      	mov	r3, r1
 80002b8:	717b      	strb	r3, [r7, #5]
 80002ba:	4613      	mov	r3, r2
 80002bc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002be:	202a      	movs	r0, #42	; 0x2a
 80002c0:	f7ff ff70 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80002c4:	2300      	movs	r3, #0
 80002c6:	733b      	strb	r3, [r7, #12]
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <ST7735_SetAddressWindow+0x88>)
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	737b      	strb	r3, [r7, #13]
 80002d4:	2300      	movs	r3, #0
 80002d6:	73bb      	strb	r3, [r7, #14]
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <ST7735_SetAddressWindow+0x88>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	797b      	ldrb	r3, [r7, #5]
 80002de:	4413      	add	r3, r2
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	2104      	movs	r1, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff74 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002f0:	202b      	movs	r0, #43	; 0x2b
 80002f2:	f7ff ff57 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <ST7735_SetAddressWindow+0x8c>)
 80002f8:	781a      	ldrb	r2, [r3, #0]
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	4413      	add	r3, r2
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <ST7735_SetAddressWindow+0x8c>)
 8000304:	781a      	ldrb	r2, [r3, #0]
 8000306:	793b      	ldrb	r3, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	2104      	movs	r1, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5f 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800031a:	202c      	movs	r0, #44	; 0x2c
 800031c:	f7ff ff42 	bl	80001a4 <ST7735_WriteCommand>
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	20000004 	.word	0x20000004
 800032c:	20000005 	.word	0x20000005

08000330 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000330:	b082      	sub	sp, #8
 8000332:	b590      	push	{r4, r7, lr}
 8000334:	b089      	sub	sp, #36	; 0x24
 8000336:	af00      	add	r7, sp, #0
 8000338:	637b      	str	r3, [r7, #52]	; 0x34
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]
 800033e:	460b      	mov	r3, r1
 8000340:	80bb      	strh	r3, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	b2d8      	uxtb	r0, r3
 800034a:	88bb      	ldrh	r3, [r7, #4]
 800034c:	b2d9      	uxtb	r1, r3
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	b2da      	uxtb	r2, r3
 8000352:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000356:	4413      	add	r3, r2
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3b01      	subs	r3, #1
 800035c:	b2dc      	uxtb	r4, r3
 800035e:	88bb      	ldrh	r3, [r7, #4]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000366:	4413      	add	r3, r2
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3b01      	subs	r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4622      	mov	r2, r4
 8000370:	f7ff ff96 	bl	80002a0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
 8000378:	e043      	b.n	8000402 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 800037a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	3b20      	subs	r3, #32
 8000380:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000384:	fb01 f303 	mul.w	r3, r1, r3
 8000388:	4619      	mov	r1, r3
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	440b      	add	r3, r1
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
 800039a:	e029      	b.n	80003f0 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fa02 f303 	lsl.w	r3, r2, r3
 80003a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00e      	beq.n	80003ca <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 80003ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003ae:	0a1b      	lsrs	r3, r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	743b      	strb	r3, [r7, #16]
 80003b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff08 	bl	80001d8 <ST7735_WriteData>
 80003c8:	e00f      	b.n	80003ea <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003ce:	0a1b      	lsrs	r3, r3, #8
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	733b      	strb	r3, [r7, #12]
 80003d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	2102      	movs	r1, #2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff fef7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 80003ea:	69bb      	ldr	r3, [r7, #24]
 80003ec:	3301      	adds	r3, #1
 80003ee:	61bb      	str	r3, [r7, #24]
 80003f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003f4:	461a      	mov	r2, r3
 80003f6:	69bb      	ldr	r3, [r7, #24]
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d3cf      	bcc.n	800039c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	3301      	adds	r3, #1
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000406:	461a      	mov	r2, r3
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	4293      	cmp	r3, r2
 800040c:	d3b5      	bcc.n	800037a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	3724      	adds	r7, #36	; 0x24
 8000414:	46bd      	mov	sp, r7
 8000416:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800041a:	b002      	add	sp, #8
 800041c:	4770      	bx	lr
	...

08000420 <ST7735_Init>:

void ST7735_Init()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  ST7735_GPIO_Init();
 8000424:	f7ff fea4 	bl	8000170 <ST7735_GPIO_Init>
  TFT_CS_L();
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <ST7735_Init+0x2c>)
 800042e:	f002 f8e3 	bl	80025f8 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000432:	f7ff fea3 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <ST7735_Init+0x30>)
 8000438:	f7ff fee8 	bl	800020c <ST7735_ExecuteCommandList>
    //ST7735_ExecuteCommandList(init_cmds2);
    //ST7735_ExecuteCommandList(init_cmds3);
    TFT_CS_H();
 800043c:	2201      	movs	r2, #1
 800043e:	2108      	movs	r1, #8
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <ST7735_Init+0x2c>)
 8000442:	f002 f8d9 	bl	80025f8 <HAL_GPIO_WritePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010c00 	.word	0x40010c00
 8000450:	08006fc4 	.word	0x08006fc4

08000454 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000454:	b082      	sub	sp, #8
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af04      	add	r7, sp, #16
 800045c:	603a      	str	r2, [r7, #0]
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	4603      	mov	r3, r0
 8000462:	80fb      	strh	r3, [r7, #6]
 8000464:	460b      	mov	r3, r1
 8000466:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	4824      	ldr	r0, [pc, #144]	; (8000500 <ST7735_DrawString+0xac>)
 800046e:	f002 f8c3 	bl	80025f8 <HAL_GPIO_WritePin>

    while(*str)
 8000472:	e033      	b.n	80004dc <ST7735_DrawString+0x88>
    {
        if(x + font.width >= _width)
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	7d3a      	ldrb	r2, [r7, #20]
 8000478:	4413      	add	r3, r2
 800047a:	4a22      	ldr	r2, [pc, #136]	; (8000504 <ST7735_DrawString+0xb0>)
 800047c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000480:	4293      	cmp	r3, r2
 8000482:	db16      	blt.n	80004b2 <ST7735_DrawString+0x5e>
        {
            x = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000488:	7d7b      	ldrb	r3, [r7, #21]
 800048a:	b29a      	uxth	r2, r3
 800048c:	88bb      	ldrh	r3, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000492:	88bb      	ldrh	r3, [r7, #4]
 8000494:	7d7a      	ldrb	r2, [r7, #21]
 8000496:	4413      	add	r3, r2
 8000498:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <ST7735_DrawString+0xb4>)
 800049a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800049e:	4293      	cmp	r3, r2
 80004a0:	da21      	bge.n	80004e6 <ST7735_DrawString+0x92>
            {
                break;
            }

            if(*str == ' ')
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b20      	cmp	r3, #32
 80004a8:	d103      	bne.n	80004b2 <ST7735_DrawString+0x5e>
            {
                // skip spaces in the beginning of the new line
                str++;
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	603b      	str	r3, [r7, #0]
                continue;
 80004b0:	e014      	b.n	80004dc <ST7735_DrawString+0x88>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	88b9      	ldrh	r1, [r7, #4]
 80004b8:	88f8      	ldrh	r0, [r7, #6]
 80004ba:	8c3b      	ldrh	r3, [r7, #32]
 80004bc:	9302      	str	r3, [sp, #8]
 80004be:	8bbb      	ldrh	r3, [r7, #28]
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	f7ff ff32 	bl	8000330 <ST7735_WriteChar>
        x += font.width;
 80004cc:	7d3b      	ldrb	r3, [r7, #20]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	88fb      	ldrh	r3, [r7, #6]
 80004d2:	4413      	add	r3, r2
 80004d4:	80fb      	strh	r3, [r7, #6]
        str++;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	603b      	str	r3, [r7, #0]
    while(*str)
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1c7      	bne.n	8000474 <ST7735_DrawString+0x20>
 80004e4:	e000      	b.n	80004e8 <ST7735_DrawString+0x94>
                break;
 80004e6:	bf00      	nop
    }
    TFT_CS_H();
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <ST7735_DrawString+0xac>)
 80004ee:	f002 f883 	bl	80025f8 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004fc:	b002      	add	sp, #8
 80004fe:	4770      	bx	lr
 8000500:	40010c00 	.word	0x40010c00
 8000504:	20000002 	.word	0x20000002
 8000508:	20000000 	.word	0x20000000

0800050c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4604      	mov	r4, r0
 8000514:	4608      	mov	r0, r1
 8000516:	4611      	mov	r1, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4623      	mov	r3, r4
 800051c:	80fb      	strh	r3, [r7, #6]
 800051e:	4603      	mov	r3, r0
 8000520:	80bb      	strh	r3, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	807b      	strh	r3, [r7, #2]
 8000526:	4613      	mov	r3, r2
 8000528:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	4a3a      	ldr	r2, [pc, #232]	; (8000618 <ST7735_FillRectangle+0x10c>)
 800052e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000532:	4293      	cmp	r3, r2
 8000534:	da6c      	bge.n	8000610 <ST7735_FillRectangle+0x104>
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	4a38      	ldr	r2, [pc, #224]	; (800061c <ST7735_FillRectangle+0x110>)
 800053a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800053e:	4293      	cmp	r3, r2
 8000540:	da66      	bge.n	8000610 <ST7735_FillRectangle+0x104>
    if((x + w - 1) >= _width) w = _width - x;
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	4413      	add	r3, r2
 8000548:	4a33      	ldr	r2, [pc, #204]	; (8000618 <ST7735_FillRectangle+0x10c>)
 800054a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054e:	4293      	cmp	r3, r2
 8000550:	dd06      	ble.n	8000560 <ST7735_FillRectangle+0x54>
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <ST7735_FillRectangle+0x10c>)
 8000554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000558:	b29a      	uxth	r2, r3
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000560:	88ba      	ldrh	r2, [r7, #4]
 8000562:	883b      	ldrh	r3, [r7, #0]
 8000564:	4413      	add	r3, r2
 8000566:	4a2d      	ldr	r2, [pc, #180]	; (800061c <ST7735_FillRectangle+0x110>)
 8000568:	f9b2 2000 	ldrsh.w	r2, [r2]
 800056c:	4293      	cmp	r3, r2
 800056e:	dd06      	ble.n	800057e <ST7735_FillRectangle+0x72>
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <ST7735_FillRectangle+0x110>)
 8000572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000576:	b29a      	uxth	r2, r3
 8000578:	88bb      	ldrh	r3, [r7, #4]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <ST7735_FillRectangle+0x114>)
 8000584:	f002 f838 	bl	80025f8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	b2d8      	uxtb	r0, r3
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	b2d9      	uxtb	r1, r3
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	887b      	ldrh	r3, [r7, #2]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4413      	add	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	3b01      	subs	r3, #1
 800059e:	b2dc      	uxtb	r4, r3
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	883b      	ldrh	r3, [r7, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4622      	mov	r2, r4
 80005b2:	f7ff fe75 	bl	80002a0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b6:	8c3b      	ldrh	r3, [r7, #32]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	733b      	strb	r3, [r7, #12]
 80005c0:	8c3b      	ldrh	r3, [r7, #32]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <ST7735_FillRectangle+0x114>)
 80005cc:	f002 f814 	bl	80025f8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	80bb      	strh	r3, [r7, #4]
 80005d4:	e013      	b.n	80005fe <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	e00a      	b.n	80005f2 <ST7735_FillRectangle+0xe6>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
          //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005dc:	f107 010c 	add.w	r1, r7, #12
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2202      	movs	r2, #2
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <ST7735_FillRectangle+0x118>)
 80005e8:	f002 fcca 	bl	8002f80 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	80fb      	strh	r3, [r7, #6]
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f1      	bne.n	80005dc <ST7735_FillRectangle+0xd0>
    for(y = h; y > 0; y--)
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	80bb      	strh	r3, [r7, #4]
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1e8      	bne.n	80005d6 <ST7735_FillRectangle+0xca>
#endif
        }
    }
    TFT_CS_H();
 8000604:	2201      	movs	r2, #1
 8000606:	2108      	movs	r1, #8
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <ST7735_FillRectangle+0x114>)
 800060a:	f001 fff5 	bl	80025f8 <HAL_GPIO_WritePin>
 800060e:	e000      	b.n	8000612 <ST7735_FillRectangle+0x106>
    if((x >= _width) || (y >= _height)) return;
 8000610:	bf00      	nop
}
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000002 	.word	0x20000002
 800061c:	20000000 	.word	0x20000000
 8000620:	40010c00 	.word	0x40010c00
 8000624:	200000b4 	.word	0x200000b4

08000628 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <ST7735_FillScreen+0x30>)
 8000634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <ST7735_FillScreen+0x34>)
 800063c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000640:	b299      	uxth	r1, r3
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	460b      	mov	r3, r1
 8000648:	2100      	movs	r1, #0
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff5e 	bl	800050c <ST7735_FillRectangle>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000002 	.word	0x20000002
 800065c:	20000000 	.word	0x20000000

08000660 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  TFT_BL_H();
 8000664:	2201      	movs	r2, #1
 8000666:	2110      	movs	r1, #16
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <ST7735_Backlight_On+0x14>)
 800066a:	f001 ffc5 	bl	80025f8 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010c00 	.word	0x40010c00

08000678 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <SELECT+0x1c>)
 8000684:	f001 ffb8 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f001 fbf3 	bl	8001e74 <HAL_Delay>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010c00 	.word	0x40010c00

08000698 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <DESELECT+0x1c>)
 80006a4:	f001 ffa8 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f001 fbe3 	bl	8001e74 <HAL_Delay>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006c2:	bf00      	nop
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SPI_TxByte+0x30>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d1f8      	bne.n	80006c4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <SPI_TxByte+0x30>)
 80006da:	f002 fc51 	bl	8002f80 <HAL_SPI_Transmit>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000010c 	.word	0x2000010c

080006ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006f8:	bf00      	nop
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <SPI_TxBuffer+0x30>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 0302 	and.w	r3, r3, #2
 8000704:	2b02      	cmp	r3, #2
 8000706:	d1f8      	bne.n	80006fa <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000708:	887a      	ldrh	r2, [r7, #2]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <SPI_TxBuffer+0x30>)
 8000710:	f002 fc36 	bl	8002f80 <HAL_SPI_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000010c 	.word	0x2000010c

08000720 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000726:	23ff      	movs	r3, #255	; 0xff
 8000728:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800072a:	bf00      	nop
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SPI_RxByte+0x34>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	2b02      	cmp	r3, #2
 8000738:	d1f8      	bne.n	800072c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800073a:	1dba      	adds	r2, r7, #6
 800073c:	1df9      	adds	r1, r7, #7
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2301      	movs	r3, #1
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <SPI_RxByte+0x34>)
 8000746:	f002 fd5e 	bl	8003206 <HAL_SPI_TransmitReceive>

	return data;
 800074a:	79bb      	ldrb	r3, [r7, #6]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000010c 	.word	0x2000010c

08000758 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000760:	f7ff ffde 	bl	8000720 <SPI_RxByte>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SD_ReadyWait+0x30>)
 800077c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000780:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000782:	f7ff ffcd 	bl	8000720 <SPI_RxByte>
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2bff      	cmp	r3, #255	; 0xff
 800078e:	d004      	beq.n	800079a <SD_ReadyWait+0x26>
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SD_ReadyWait+0x30>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f3      	bne.n	8000782 <SD_ReadyWait+0xe>

	return res;
 800079a:	79fb      	ldrb	r3, [r7, #7]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001b8 	.word	0x200001b8

080007a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80007ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80007b2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80007b4:	f7ff ff70 	bl	8000698 <DESELECT>
	for(int i = 0; i < 10; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e005      	b.n	80007ca <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80007be:	20ff      	movs	r0, #255	; 0xff
 80007c0:	f7ff ff7a 	bl	80006b8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	ddf6      	ble.n	80007be <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80007d0:	f7ff ff52 	bl	8000678 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80007e8:	2395      	movs	r3, #149	; 0x95
 80007ea:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80007ec:	463b      	mov	r3, r7
 80007ee:	2106      	movs	r1, #6
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff7b 	bl	80006ec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80007f6:	e002      	b.n	80007fe <SD_PowerOn+0x56>
	{
		cnt--;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007fe:	f7ff ff8f 	bl	8000720 <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d002      	beq.n	800080e <SD_PowerOn+0x66>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_PowerOn+0x50>
	}

	DESELECT();
 800080e:	f7ff ff43 	bl	8000698 <DESELECT>
	SPI_TxByte(0XFF);
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	f7ff ff50 	bl	80006b8 <SPI_TxByte>

	PowerFlag = 1;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <SD_PowerOn+0x80>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000a9 	.word	0x200000a9

0800082c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <SD_PowerOff+0x14>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200000a9 	.word	0x200000a9

08000844 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <SD_CheckPower+0x10>)
 800084a:	781b      	ldrb	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	200000a9 	.word	0x200000a9

08000858 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <SD_RxDataBlock+0x5c>)
 8000864:	22c8      	movs	r2, #200	; 0xc8
 8000866:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000868:	f7ff ff5a 	bl	8000720 <SPI_RxByte>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d104      	bne.n	8000880 <SD_RxDataBlock+0x28>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <SD_RxDataBlock+0x5c>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f3      	bne.n	8000868 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return false;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2bfe      	cmp	r3, #254	; 0xfe
 8000884:	d001      	beq.n	800088a <SD_RxDataBlock+0x32>
 8000886:	2300      	movs	r3, #0
 8000888:	e00f      	b.n	80008aa <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff61 	bl	8000758 <SPI_RxBytePtr>
	} while(len--);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	603a      	str	r2, [r7, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80008a0:	f7ff ff3e 	bl	8000720 <SPI_RxByte>
	SPI_RxByte();
 80008a4:	f7ff ff3c 	bl	8000720 <SPI_RxByte>

	return true;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001b6 	.word	0x200001b6

080008b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return false;
 80008cc:	f7ff ff52 	bl	8000774 <SD_ReadyWait>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d001      	beq.n	80008da <SD_TxDataBlock+0x22>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e02f      	b.n	800093a <SD_TxDataBlock+0x82>

	/* transmit token */
	SPI_TxByte(token);
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff feeb 	bl	80006b8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2bfd      	cmp	r3, #253	; 0xfd
 80008e6:	d020      	beq.n	800092a <SD_TxDataBlock+0x72>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fefd 	bl	80006ec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80008f2:	f7ff ff15 	bl	8000720 <SPI_RxByte>
		SPI_RxByte();
 80008f6:	f7ff ff13 	bl	8000720 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80008fa:	e00b      	b.n	8000914 <SD_TxDataBlock+0x5c>
		{
			resp = SPI_RxByte();
 80008fc:	f7ff ff10 	bl	8000720 <SPI_RxByte>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	2b05      	cmp	r3, #5
 800090c:	d006      	beq.n	800091c <SD_TxDataBlock+0x64>
			i++;
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b40      	cmp	r3, #64	; 0x40
 8000918:	d9f0      	bls.n	80008fc <SD_TxDataBlock+0x44>
 800091a:	e000      	b.n	800091e <SD_TxDataBlock+0x66>
			if ((resp & 0x1F) == 0x05) break;
 800091c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800091e:	bf00      	nop
 8000920:	f7ff fefe 	bl	8000720 <SPI_RxByte>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0fa      	beq.n	8000920 <SD_TxDataBlock+0x68>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return true;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	f003 031f 	and.w	r3, r3, #31
 8000930:	2b05      	cmp	r3, #5
 8000932:	d101      	bne.n	8000938 <SD_TxDataBlock+0x80>
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <SD_TxDataBlock+0x82>

	return false;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	6039      	str	r1, [r7, #0]
 800094c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800094e:	f7ff ff11 	bl	8000774 <SD_ReadyWait>
 8000952:	4603      	mov	r3, r0
 8000954:	2bff      	cmp	r3, #255	; 0xff
 8000956:	d001      	beq.n	800095c <SD_SendCmd+0x1a>
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	e042      	b.n	80009e2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff feaa 	bl	80006b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	0e1b      	lsrs	r3, r3, #24
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fea4 	bl	80006b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	0c1b      	lsrs	r3, r3, #16
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe9e 	bl	80006b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe98 	bl	80006b8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe93 	bl	80006b8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b40      	cmp	r3, #64	; 0x40
 8000996:	d102      	bne.n	800099e <SD_SendCmd+0x5c>
 8000998:	2395      	movs	r3, #149	; 0x95
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e007      	b.n	80009ae <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b48      	cmp	r3, #72	; 0x48
 80009a2:	d102      	bne.n	80009aa <SD_SendCmd+0x68>
 80009a4:	2387      	movs	r3, #135	; 0x87
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <SD_SendCmd+0x6c>
	else crc = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe81 	bl	80006b8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b4c      	cmp	r3, #76	; 0x4c
 80009ba:	d101      	bne.n	80009c0 <SD_SendCmd+0x7e>
 80009bc:	f7ff feb0 	bl	8000720 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80009c0:	230a      	movs	r3, #10
 80009c2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80009c4:	f7ff feac 	bl	8000720 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80009cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	da05      	bge.n	80009e0 <SD_SendCmd+0x9e>
 80009d4:	7bbb      	ldrb	r3, [r7, #14]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	73bb      	strb	r3, [r7, #14]
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f1      	bne.n	80009c4 <SD_SendCmd+0x82>

	return res;
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SD_disk_initialize+0x14>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e0d6      	b.n	8000bae <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000a00:	4b6d      	ldr	r3, [pc, #436]	; (8000bb8 <SD_disk_initialize+0x1cc>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <SD_disk_initialize+0x2a>
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <SD_disk_initialize+0x1cc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	e0cb      	b.n	8000bae <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000a16:	f7ff fec7 	bl	80007a8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000a1a:	f7ff fe2d 	bl	8000678 <SELECT>

	/* check disk type */
	type = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000a22:	2100      	movs	r1, #0
 8000a24:	2040      	movs	r0, #64	; 0x40
 8000a26:	f7ff ff8c 	bl	8000942 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	f040 80a6 	bne.w	8000b7e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000a32:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <SD_disk_initialize+0x1d0>)
 8000a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a38:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a3e:	2048      	movs	r0, #72	; 0x48
 8000a40:	f7ff ff7f 	bl	8000942 <SD_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d158      	bne.n	8000afc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	e00c      	b.n	8000a6a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000a50:	7bfc      	ldrb	r4, [r7, #15]
 8000a52:	f7ff fe65 	bl	8000720 <SPI_RxByte>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f104 0310 	add.w	r3, r4, #16
 8000a5e:	443b      	add	r3, r7
 8000a60:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	3301      	adds	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d9ef      	bls.n	8000a50 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	f040 8083 	bne.w	8000b7e <SD_disk_initialize+0x192>
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	2baa      	cmp	r3, #170	; 0xaa
 8000a7c:	d17f      	bne.n	8000b7e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2077      	movs	r0, #119	; 0x77
 8000a82:	f7ff ff5e 	bl	8000942 <SD_SendCmd>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d807      	bhi.n	8000a9c <SD_disk_initialize+0xb0>
 8000a8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a90:	2069      	movs	r0, #105	; 0x69
 8000a92:	f7ff ff56 	bl	8000942 <SD_SendCmd>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d005      	beq.n	8000aa8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <SD_disk_initialize+0x1d0>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1eb      	bne.n	8000a7e <SD_disk_initialize+0x92>
 8000aa6:	e000      	b.n	8000aaa <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000aa8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <SD_disk_initialize+0x1d0>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d064      	beq.n	8000b7e <SD_disk_initialize+0x192>
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	207a      	movs	r0, #122	; 0x7a
 8000ab8:	f7ff ff43 	bl	8000942 <SD_SendCmd>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d15d      	bne.n	8000b7e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e00c      	b.n	8000ae2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000ac8:	7bfc      	ldrb	r4, [r7, #15]
 8000aca:	f7ff fe29 	bl	8000720 <SPI_RxByte>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f104 0310 	add.w	r3, r4, #16
 8000ad6:	443b      	add	r3, r7
 8000ad8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d9ef      	bls.n	8000ac8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ae8:	7a3b      	ldrb	r3, [r7, #8]
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SD_disk_initialize+0x10a>
 8000af2:	230c      	movs	r3, #12
 8000af4:	e000      	b.n	8000af8 <SD_disk_initialize+0x10c>
 8000af6:	2304      	movs	r3, #4
 8000af8:	73bb      	strb	r3, [r7, #14]
 8000afa:	e040      	b.n	8000b7e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000afc:	2100      	movs	r1, #0
 8000afe:	2077      	movs	r0, #119	; 0x77
 8000b00:	f7ff ff1f 	bl	8000942 <SD_SendCmd>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d808      	bhi.n	8000b1c <SD_disk_initialize+0x130>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2069      	movs	r0, #105	; 0x69
 8000b0e:	f7ff ff18 	bl	8000942 <SD_SendCmd>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d801      	bhi.n	8000b1c <SD_disk_initialize+0x130>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e000      	b.n	8000b1e <SD_disk_initialize+0x132>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d10e      	bne.n	8000b44 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000b26:	2100      	movs	r1, #0
 8000b28:	2077      	movs	r0, #119	; 0x77
 8000b2a:	f7ff ff0a 	bl	8000942 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d80e      	bhi.n	8000b52 <SD_disk_initialize+0x166>
 8000b34:	2100      	movs	r1, #0
 8000b36:	2069      	movs	r0, #105	; 0x69
 8000b38:	f7ff ff03 	bl	8000942 <SD_SendCmd>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d107      	bne.n	8000b52 <SD_disk_initialize+0x166>
 8000b42:	e00d      	b.n	8000b60 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b44:	2100      	movs	r1, #0
 8000b46:	2041      	movs	r0, #65	; 0x41
 8000b48:	f7ff fefb 	bl	8000942 <SD_SendCmd>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <SD_disk_initialize+0x1d0>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1e1      	bne.n	8000b20 <SD_disk_initialize+0x134>
 8000b5c:	e000      	b.n	8000b60 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b5e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <SD_disk_initialize+0x1d0>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d007      	beq.n	8000b7a <SD_disk_initialize+0x18e>
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	2050      	movs	r0, #80	; 0x50
 8000b70:	f7ff fee7 	bl	8000942 <SD_SendCmd>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_initialize+0x192>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <SD_disk_initialize+0x1d4>)
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b84:	f7ff fd88 	bl	8000698 <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fdca 	bl	8000720 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d008      	beq.n	8000ba4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <SD_disk_initialize+0x1cc>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f023 0301 	bic.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SD_disk_initialize+0x1cc>)
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e001      	b.n	8000ba8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ba4:	f7ff fe42 	bl	800082c <SD_PowerOff>
	}

	return Stat;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <SD_disk_initialize+0x1cc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000006 	.word	0x20000006
 8000bbc:	200001b6 	.word	0x200001b6
 8000bc0:	200000a8 	.word	0x200000a8

08000bc4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SD_disk_status+0x14>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e002      	b.n	8000bde <SD_disk_status+0x1a>
	return Stat;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <SD_disk_status+0x24>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000006 	.word	0x20000006

08000bec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <SD_disk_read+0x1c>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <SD_disk_read+0x20>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e054      	b.n	8000cb6 <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <SD_disk_read+0xd4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SD_disk_read+0x32>
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e04b      	b.n	8000cb6 <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <SD_disk_read+0xd8>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <SD_disk_read+0x44>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c30:	f7ff fd22 	bl	8000678 <SELECT>

	if (count == 1)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d111      	bne.n	8000c5e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2051      	movs	r0, #81	; 0x51
 8000c3e:	f7ff fe80 	bl	8000942 <SD_SendCmd>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d12c      	bne.n	8000ca2 <SD_disk_read+0xb6>
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f7ff fe03 	bl	8000858 <SD_RxDataBlock>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d024      	beq.n	8000ca2 <SD_disk_read+0xb6>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	e021      	b.n	8000ca2 <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2052      	movs	r0, #82	; 0x52
 8000c62:	f7ff fe6e 	bl	8000942 <SD_SendCmd>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11a      	bne.n	8000ca2 <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fdf1 	bl	8000858 <SD_RxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f083 0301 	eor.w	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <SD_disk_read+0xac>
				buff += 512;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c88:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1ea      	bne.n	8000c6c <SD_disk_read+0x80>
 8000c96:	e000      	b.n	8000c9a <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c98:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	204c      	movs	r0, #76	; 0x4c
 8000c9e:	f7ff fe50 	bl	8000942 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ca2:	f7ff fcf9 	bl	8000698 <DESELECT>
	SPI_RxByte();
 8000ca6:	f7ff fd3b 	bl	8000720 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000006 	.word	0x20000006
 8000cc4:	200000a8 	.word	0x200000a8

08000cc8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <SD_disk_write+0x1c>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <SD_disk_write+0x20>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e071      	b.n	8000dcc <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <SD_disk_write+0x10c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SD_disk_write+0x32>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e068      	b.n	8000dcc <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <SD_disk_write+0x10c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SD_disk_write+0x44>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e05f      	b.n	8000dcc <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <SD_disk_write+0x110>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <SD_disk_write+0x56>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	025b      	lsls	r3, r3, #9
 8000d1c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d1e:	f7ff fcab 	bl	8000678 <SELECT>

	if (count == 1)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d110      	bne.n	8000d4a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	2058      	movs	r0, #88	; 0x58
 8000d2c:	f7ff fe09 	bl	8000942 <SD_SendCmd>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d140      	bne.n	8000db8 <SD_disk_write+0xf0>
 8000d36:	21fe      	movs	r1, #254	; 0xfe
 8000d38:	68b8      	ldr	r0, [r7, #8]
 8000d3a:	f7ff fdbd 	bl	80008b8 <SD_TxDataBlock>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d039      	beq.n	8000db8 <SD_disk_write+0xf0>
			count = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	e036      	b.n	8000db8 <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SD_disk_write+0x110>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2077      	movs	r0, #119	; 0x77
 8000d5a:	f7ff fdf2 	bl	8000942 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	2057      	movs	r0, #87	; 0x57
 8000d62:	f7ff fdee 	bl	8000942 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2059      	movs	r0, #89	; 0x59
 8000d6a:	f7ff fdea 	bl	8000942 <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d121      	bne.n	8000db8 <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d74:	21fc      	movs	r1, #252	; 0xfc
 8000d76:	68b8      	ldr	r0, [r7, #8]
 8000d78:	f7ff fd9e 	bl	80008b8 <SD_TxDataBlock>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10a      	bne.n	8000d9e <SD_disk_write+0xd6>
				buff += 512;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d8e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1eb      	bne.n	8000d74 <SD_disk_write+0xac>
 8000d9c:	e000      	b.n	8000da0 <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d9e:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000da0:	21fd      	movs	r1, #253	; 0xfd
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fd88 	bl	80008b8 <SD_TxDataBlock>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f083 0301 	eor.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SD_disk_write+0xf0>
			{
				count = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000db8:	f7ff fc6e 	bl	8000698 <DESELECT>
	SPI_RxByte();
 8000dbc:	f7ff fcb0 	bl	8000720 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000006 	.word	0x20000006
 8000dd8:	200000a8 	.word	0x200000a8

08000ddc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	603a      	str	r2, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	460b      	mov	r3, r1
 8000dea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SD_disk_ioctl+0x1e>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e115      	b.n	8001026 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d124      	bne.n	8000e50 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d012      	beq.n	8000e34 <SD_disk_ioctl+0x58>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	dc1a      	bgt.n	8000e48 <SD_disk_ioctl+0x6c>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <SD_disk_ioctl+0x40>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d006      	beq.n	8000e28 <SD_disk_ioctl+0x4c>
 8000e1a:	e015      	b.n	8000e48 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000e1c:	f7ff fd06 	bl	800082c <SD_PowerOff>
			res = RES_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e26:	e0fc      	b.n	8001022 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000e28:	f7ff fcbe 	bl	80007a8 <SD_PowerOn>
			res = RES_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e32:	e0f6      	b.n	8001022 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	1c5c      	adds	r4, r3, #1
 8000e38:	f7ff fd04 	bl	8000844 <SD_CheckPower>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e46:	e0ec      	b.n	8001022 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e4e:	e0e8      	b.n	8001022 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e50:	4b77      	ldr	r3, [pc, #476]	; (8001030 <SD_disk_ioctl+0x254>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SD_disk_ioctl+0x86>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e0e1      	b.n	8001026 <SD_disk_ioctl+0x24a>

		SELECT();
 8000e62:	f7ff fc09 	bl	8000678 <SELECT>

		switch (ctrl)
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	2b0d      	cmp	r3, #13
 8000e6a:	f200 80cb 	bhi.w	8001004 <SD_disk_ioctl+0x228>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <SD_disk_ioctl+0x98>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000f6f 	.word	0x08000f6f
 8000e78:	08000ead 	.word	0x08000ead
 8000e7c:	08000f5f 	.word	0x08000f5f
 8000e80:	08001005 	.word	0x08001005
 8000e84:	08001005 	.word	0x08001005
 8000e88:	08001005 	.word	0x08001005
 8000e8c:	08001005 	.word	0x08001005
 8000e90:	08001005 	.word	0x08001005
 8000e94:	08001005 	.word	0x08001005
 8000e98:	08001005 	.word	0x08001005
 8000e9c:	08001005 	.word	0x08001005
 8000ea0:	08000f81 	.word	0x08000f81
 8000ea4:	08000fa5 	.word	0x08000fa5
 8000ea8:	08000fc9 	.word	0x08000fc9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000eac:	2100      	movs	r1, #0
 8000eae:	2049      	movs	r0, #73	; 0x49
 8000eb0:	f7ff fd47 	bl	8000942 <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 80a8 	bne.w	800100c <SD_disk_ioctl+0x230>
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2110      	movs	r1, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fcc8 	bl	8000858 <SD_RxDataBlock>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 809e 	beq.w	800100c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	099b      	lsrs	r3, r3, #6
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d10e      	bne.n	8000ef8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000eda:	7d7b      	ldrb	r3, [r7, #21]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	7d3b      	ldrb	r3, [r7, #20]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000eee:	8bfb      	ldrh	r3, [r7, #30]
 8000ef0:	029a      	lsls	r2, r3, #10
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e02e      	b.n	8000f56 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ef8:	7c7b      	ldrb	r3, [r7, #17]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	7dbb      	ldrb	r3, [r7, #22]
 8000f02:	09db      	lsrs	r3, r3, #7
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	7d7b      	ldrb	r3, [r7, #21]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0306 	and.w	r3, r3, #6
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f20:	7d3b      	ldrb	r3, [r7, #20]
 8000f22:	099b      	lsrs	r3, r3, #6
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7cfb      	ldrb	r3, [r7, #19]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4413      	add	r3, r2
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	7cbb      	ldrb	r3, [r7, #18]
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f48:	8bfa      	ldrh	r2, [r7, #30]
 8000f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f4e:	3b09      	subs	r3, #9
 8000f50:	409a      	lsls	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000f5c:	e056      	b.n	800100c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f6c:	e055      	b.n	800101a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000f6e:	f7ff fc01 	bl	8000774 <SD_ReadyWait>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d14b      	bne.n	8001010 <SD_disk_ioctl+0x234>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f7e:	e047      	b.n	8001010 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f80:	2100      	movs	r1, #0
 8000f82:	2049      	movs	r0, #73	; 0x49
 8000f84:	f7ff fcdd 	bl	8000942 <SD_SendCmd>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d142      	bne.n	8001014 <SD_disk_ioctl+0x238>
 8000f8e:	2110      	movs	r1, #16
 8000f90:	6a38      	ldr	r0, [r7, #32]
 8000f92:	f7ff fc61 	bl	8000858 <SD_RxDataBlock>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d03b      	beq.n	8001014 <SD_disk_ioctl+0x238>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fa2:	e037      	b.n	8001014 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	204a      	movs	r0, #74	; 0x4a
 8000fa8:	f7ff fccb 	bl	8000942 <SD_SendCmd>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d132      	bne.n	8001018 <SD_disk_ioctl+0x23c>
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	6a38      	ldr	r0, [r7, #32]
 8000fb6:	f7ff fc4f 	bl	8000858 <SD_RxDataBlock>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02b      	beq.n	8001018 <SD_disk_ioctl+0x23c>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fc6:	e027      	b.n	8001018 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	207a      	movs	r0, #122	; 0x7a
 8000fcc:	f7ff fcb9 	bl	8000942 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fdc:	e00b      	b.n	8000ff6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000fde:	6a3c      	ldr	r4, [r7, #32]
 8000fe0:	1c63      	adds	r3, r4, #1
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	f7ff fb9c 	bl	8000720 <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d9ef      	bls.n	8000fde <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001004:	2304      	movs	r3, #4
 8001006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800100a:	e006      	b.n	800101a <SD_disk_ioctl+0x23e>
			break;
 800100c:	bf00      	nop
 800100e:	e004      	b.n	800101a <SD_disk_ioctl+0x23e>
			break;
 8001010:	bf00      	nop
 8001012:	e002      	b.n	800101a <SD_disk_ioctl+0x23e>
			break;
 8001014:	bf00      	nop
 8001016:	e000      	b.n	800101a <SD_disk_ioctl+0x23e>
			break;
 8001018:	bf00      	nop
		}

		DESELECT();
 800101a:	f7ff fb3d 	bl	8000698 <DESELECT>
		SPI_RxByte();
 800101e:	f7ff fb7f 	bl	8000720 <SPI_RxByte>
	}

	return res;
 8001022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001026:	4618      	mov	r0, r3
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	20000006 	.word	0x20000006

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f000 feb9 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f85d 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 f941 	bl	80012c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001046:	f000 f8a9 	bl	800119c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800104a:	f000 f913 	bl	8001274 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800104e:	f003 f991 	bl	8004374 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001052:	f000 f8d9 	bl	8001208 <MX_SPI2_Init>
  MX_CRC_Init();
 8001056:	f000 f88d 	bl	8001174 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800105a:	f7ff f9e1 	bl	8000420 <ST7735_Init>
  ST7735_Backlight_On();
 800105e:	f7ff faff 	bl	8000660 <ST7735_Backlight_On>

  sd_card = new_sd_card();
 8001062:	f000 fa98 	bl	8001596 <new_sd_card>
 8001066:	4603      	mov	r3, r0
 8001068:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <main+0xb0>)
 800106a:	6013      	str	r3, [r2, #0]
  mount_sd_card(sd_card, print_uart_message);
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0xb0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	491d      	ldr	r1, [pc, #116]	; (80010e8 <main+0xb4>)
 8001072:	4618      	mov	r0, r3
 8001074:	f000 faa8 	bl	80015c8 <mount_sd_card>
  show_files(sd_card, print_uart_message);
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <main+0xb0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	491a      	ldr	r1, [pc, #104]	; (80010e8 <main+0xb4>)
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fad4 	bl	800162c <show_files>
  uint32_t res = HAL_CRC_Calculate(&hcrc, (uint32_t*)"hello bo", 8);
 8001084:	2208      	movs	r2, #8
 8001086:	4919      	ldr	r1, [pc, #100]	; (80010ec <main+0xb8>)
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <main+0xbc>)
 800108a:	f001 f840 	bl	800210e <HAL_CRC_Calculate>
 800108e:	6278      	str	r0, [r7, #36]	; 0x24
  char dest[32];
  sprintf(dest, "%lu", res);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001094:	4917      	ldr	r1, [pc, #92]	; (80010f4 <main+0xc0>)
 8001096:	4618      	mov	r0, r3
 8001098:	f005 fac6 	bl	8006628 <siprintf>
  HAL_Delay(2000);
 800109c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a0:	f000 fee8 	bl	8001e74 <HAL_Delay>
  print_uart_message(dest);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa5c 	bl	8001564 <print_uart_message>

  state_info = new_state_info();
 80010ac:	f000 faf8 	bl	80016a0 <new_state_info>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <main+0xc4>)
 80010b4:	6013      	str	r3, [r2, #0]
  set_state(state_info, ENTER_SUM);
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <main+0xc4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb19 	bl	80016f4 <set_state>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_uart_message(dest);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fa4d 	bl	8001564 <print_uart_message>
	  HAL_Delay(2000);
 80010ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ce:	f000 fed1 	bl	8001e74 <HAL_Delay>
	  get_uart_input();
 80010d2:	f000 fa2f 	bl	8001534 <get_uart_input>
	  reduce_state_to_constant_output(state_info);
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <main+0xc4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fb50 	bl	8001780 <reduce_state_to_constant_output>
	  print_uart_message(dest);
 80010e0:	e7ef      	b.n	80010c2 <main+0x8e>
 80010e2:	bf00      	nop
 80010e4:	200001b0 	.word	0x200001b0
 80010e8:	08001565 	.word	0x08001565
 80010ec:	08006e80 	.word	0x08006e80
 80010f0:	200000ac 	.word	0x200000ac
 80010f4:	08006e8c 	.word	0x08006e8c
 80010f8:	200001ac 	.word	0x200001ac

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b090      	sub	sp, #64	; 0x40
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 faac 	bl	8006668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fa90 	bl	8002658 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800113e:	f000 fa25 	bl	800158c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fcfe 	bl	8002b5c <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001166:	f000 fa11 	bl	800158c <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3740      	adds	r7, #64	; 0x40
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_CRC_Init+0x20>)
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <MX_CRC_Init+0x24>)
 800117c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_CRC_Init+0x20>)
 8001180:	f000 ffa9 	bl	80020d6 <HAL_CRC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800118a:	f000 f9ff 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000ac 	.word	0x200000ac
 8001198:	40023000 	.word	0x40023000

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f001 fe43 	bl	8002e78 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f9c8 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000b4 	.word	0x200000b4
 8001204:	40013000 	.word	0x40013000

08001208 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI2_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_SPI2_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_SPI2_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_SPI2_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_SPI2_Init+0x64>)
 800125a:	f001 fe0d 	bl	8002e78 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 f992 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000010c 	.word	0x2000010c
 8001270:	40003800 	.word	0x40003800

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_USART2_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012ac:	f002 fa02 	bl	80036b4 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 f969 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000164 	.word	0x20000164
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_GPIO_Init+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_GPIO_Init+0xb8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3
 8001324:	2200      	movs	r2, #0
 8001326:	f240 411e 	movw	r1, #1054	; 0x41e
 800132a:	4816      	ldr	r0, [pc, #88]	; (8001384 <MX_GPIO_Init+0xbc>)
 800132c:	f001 f964 	bl	80025f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB10 PB3
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3
 8001330:	f240 431e 	movw	r3, #1054	; 0x41e
 8001334:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_GPIO_Init+0xbc>)
 800134a:	f000 ffd1 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEXT_ALGO_BUTTON_Pin PREV_ALGO_BUTTON_Pin EXECUTE_BUTTON_Pin */
  GPIO_InitStruct.Pin = NEXT_ALGO_BUTTON_Pin|PREV_ALGO_BUTTON_Pin|EXECUTE_BUTTON_Pin;
 800134e:	23e0      	movs	r3, #224	; 0xe0
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_GPIO_Init+0xc0>)
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	4808      	ldr	r0, [pc, #32]	; (8001384 <MX_GPIO_Init+0xbc>)
 8001362:	f000 ffc5 	bl	80022f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2017      	movs	r0, #23
 800136c:	f000 fe7d 	bl	800206a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001370:	2017      	movs	r0, #23
 8001372:	f000 fe96 	bl	80020a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40010c00 	.word	0x40010c00
 8001388:	10210000 	.word	0x10210000

0800138c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	2b80      	cmp	r3, #128	; 0x80
 800139a:	d012      	beq.n	80013c2 <HAL_GPIO_EXTI_Callback+0x36>
 800139c:	2b80      	cmp	r3, #128	; 0x80
 800139e:	dc17      	bgt.n	80013d0 <HAL_GPIO_EXTI_Callback+0x44>
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_EXTI_Callback+0x1e>
 80013a4:	2b40      	cmp	r3, #64	; 0x40
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_EXTI_Callback+0x2a>
		break;
	case EXECUTE_BUTTON_Pin:
		set_state(state_info, EXECUTE);
		break;
	default:
		break;
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_EXTI_Callback+0x44>
		set_next_algo(state_info);
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_GPIO_EXTI_Callback+0x50>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f9b2 	bl	8001718 <set_next_algo>
		break;
 80013b4:	e00d      	b.n	80013d2 <HAL_GPIO_EXTI_Callback+0x46>
		set_prev_algo(state_info);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_GPIO_EXTI_Callback+0x50>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f9ca 	bl	8001754 <set_prev_algo>
		break;
 80013c0:	e007      	b.n	80013d2 <HAL_GPIO_EXTI_Callback+0x46>
		set_state(state_info, EXECUTE);
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_GPIO_EXTI_Callback+0x50>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2103      	movs	r1, #3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f993 	bl	80016f4 <set_state>
		break;
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_EXTI_Callback+0x46>
		break;
 80013d0:	bf00      	nop
	}
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001ac 	.word	0x200001ac

080013e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if (state_info->current_state == ENTER_SUM) {
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10b      	bne.n	800140c <HAL_UART_RxCpltCallback+0x2c>
		if (is_checksum_end()) {
 80013f4:	f000 f840 	bl	8001478 <is_checksum_end>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d02e      	beq.n	800145c <HAL_UART_RxCpltCallback+0x7c>
			HAL_UART_AbortReceive(&huart2);
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 8001400:	f002 fa02 	bl	8003808 <HAL_UART_AbortReceive>
			print_uart_message(CHOOSE_ALGO_MSG);
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001406:	f000 f8ad 	bl	8001564 <print_uart_message>
		} else if (strcmp(state_info->uart_buffer, "PREV\r") == 0) {
			set_prev_algo(state_info);
		}
		print_uart_message(CHOOSE_ALGO_MSG);
	}
}
 800140a:	e027      	b.n	800145c <HAL_UART_RxCpltCallback+0x7c>
	} else if (state_info->current_state == CHOOSE_ALGO) {
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001414:	2b02      	cmp	r3, #2
 8001416:	d121      	bne.n	800145c <HAL_UART_RxCpltCallback+0x7c>
		if (strcmp(state_info->uart_buffer, "NEXT\r") == 0) {
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3374      	adds	r3, #116	; 0x74
 800141e:	4914      	ldr	r1, [pc, #80]	; (8001470 <HAL_UART_RxCpltCallback+0x90>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fe93 	bl	800014c <strcmp>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x58>
			set_next_algo(state_info);
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f971 	bl	8001718 <set_next_algo>
 8001436:	e00e      	b.n	8001456 <HAL_UART_RxCpltCallback+0x76>
		} else if (strcmp(state_info->uart_buffer, "PREV\r") == 0) {
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3374      	adds	r3, #116	; 0x74
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <HAL_UART_RxCpltCallback+0x94>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fe83 	bl	800014c <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d104      	bne.n	8001456 <HAL_UART_RxCpltCallback+0x76>
			set_prev_algo(state_info);
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_UART_RxCpltCallback+0x84>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f97f 	bl	8001754 <set_prev_algo>
		print_uart_message(CHOOSE_ALGO_MSG);
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001458:	f000 f884 	bl	8001564 <print_uart_message>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001ac 	.word	0x200001ac
 8001468:	20000164 	.word	0x20000164
 800146c:	08006e90 	.word	0x08006e90
 8001470:	08006eb0 	.word	0x08006eb0
 8001474:	08006eb8 	.word	0x08006eb8

08001478 <is_checksum_end>:

bool is_checksum_end() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	uint8_t byte = state_info->uart_buffer[state_info->uart_write_ptr];
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <is_checksum_end+0x70>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <is_checksum_end+0x70>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4413      	add	r3, r2
 800148a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800148e:	71fb      	strb	r3, [r7, #7]

	if (byte != '\r') {
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b0d      	cmp	r3, #13
 8001494:	d008      	beq.n	80014a8 <is_checksum_end+0x30>
		state_info->uart_write_ptr += 1;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <is_checksum_end+0x70>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <is_checksum_end+0x70>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3201      	adds	r2, #1
 80014a2:	671a      	str	r2, [r3, #112]	; 0x70
		return false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e01b      	b.n	80014e0 <is_checksum_end+0x68>
	}

	strcpy(state_info->reference_checksum, state_info->uart_buffer);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <is_checksum_end+0x70>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <is_checksum_end+0x70>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3374      	adds	r3, #116	; 0x74
 80014b6:	4619      	mov	r1, r3
 80014b8:	4610      	mov	r0, r2
 80014ba:	f005 f919 	bl	80066f0 <strcpy>
	clear_buffer(state_info->uart_buffer);
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <is_checksum_end+0x70>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3374      	adds	r3, #116	; 0x74
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fc3f 	bl	8001d48 <clear_buffer>
	state_info->uart_write_ptr = 0;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <is_checksum_end+0x70>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	671a      	str	r2, [r3, #112]	; 0x70
	set_state(state_info, CHOOSE_ALGO);
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <is_checksum_end+0x70>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2102      	movs	r1, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f90b 	bl	80016f4 <set_state>

	return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001ac 	.word	0x200001ac

080014ec <read_next_byte>:

void read_next_byte() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(
			&huart2,
			(uint8_t*)(state_info->uart_buffer + state_info->uart_write_ptr),
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <read_next_byte+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3374      	adds	r3, #116	; 0x74
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <read_next_byte+0x20>)
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
	HAL_UART_Receive_IT(
 80014fc:	4413      	add	r3, r2
 80014fe:	2201      	movs	r2, #1
 8001500:	4619      	mov	r1, r3
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <read_next_byte+0x24>)
 8001504:	f002 f95b 	bl	80037be <HAL_UART_Receive_IT>
			1
	);
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001ac 	.word	0x200001ac
 8001510:	20000164 	.word	0x20000164

08001514 <read_algorithm_shift>:

void read_algorithm_shift() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(
			&huart2,
			(uint8_t*)state_info->uart_buffer,
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <read_algorithm_shift+0x18>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3374      	adds	r3, #116	; 0x74
	HAL_UART_Receive_IT(
 800151e:	2205      	movs	r2, #5
 8001520:	4619      	mov	r1, r3
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <read_algorithm_shift+0x1c>)
 8001524:	f002 f94b 	bl	80037be <HAL_UART_Receive_IT>
			SHIFT_WORD_SIZE
	);
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001ac 	.word	0x200001ac
 8001530:	20000164 	.word	0x20000164

08001534 <get_uart_input>:

void get_uart_input() {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if (state_info->current_state == ENTER_SUM) {
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <get_uart_input+0x2c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <get_uart_input+0x16>
		read_next_byte();
 8001544:	f7ff ffd2 	bl	80014ec <read_next_byte>
	} else if (state_info->current_state == CHOOSE_ALGO) {
		read_algorithm_shift();
	}
}
 8001548:	e007      	b.n	800155a <get_uart_input+0x26>
	} else if (state_info->current_state == CHOOSE_ALGO) {
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <get_uart_input+0x2c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001552:	2b02      	cmp	r3, #2
 8001554:	d101      	bne.n	800155a <get_uart_input+0x26>
		read_algorithm_shift();
 8001556:	f7ff ffdd 	bl	8001514 <read_algorithm_shift>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001ac 	.word	0x200001ac

08001564 <print_uart_message>:

void print_uart_message(char* message) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7fe fdf7 	bl	8000160 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <print_uart_message+0x24>)
 800157c:	f002 f8ea 	bl	8003754 <HAL_UART_Transmit_IT>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000164 	.word	0x20000164

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	e7fe      	b.n	8001594 <Error_Handler+0x8>

08001596 <new_sd_card>:
#include "sd_card_interaction.h"

sd_card_t* new_sd_card() {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
	sd_card_t* sd_card = calloc(1, sizeof(sd_card_t));
 800159c:	f243 110c 	movw	r1, #12556	; 0x310c
 80015a0:	2001      	movs	r0, #1
 80015a2:	f004 ff79 	bl	8006498 <calloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	607b      	str	r3, [r7, #4]
	memset(sd_card->buffer, 0, DEFAULT_BUFFER_SIZE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 80015b0:	3328      	adds	r3, #40	; 0x28
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 f856 	bl	8006668 <memset>
	return sd_card;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <mount_sd_card>:

void mount_sd_card(sd_card_t* sd_card, void (*print_callback)(char* text)) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	sd_card->fresult = f_mount(&sd_card->fs, "/", 1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4912      	ldr	r1, [pc, #72]	; (8001620 <mount_sd_card+0x58>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 fddb 	bl	8006194 <f_mount>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80015e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	if (sd_card->fresult != FR_OK) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80015f2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <mount_sd_card+0x3a>
		print_callback("Error in mounting sd_card\r");
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <mount_sd_card+0x5c>)
 80015fe:	4798      	blx	r3
		return;
 8001600:	e00a      	b.n	8001618 <mount_sd_card+0x50>
	}

	print_callback("successful mount...\r");
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <mount_sd_card+0x60>)
 8001606:	4798      	blx	r3
	f_opendir(&sd_card->directory, "/");
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800160e:	3320      	adds	r3, #32
 8001610:	4903      	ldr	r1, [pc, #12]	; (8001620 <mount_sd_card+0x58>)
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fe08 	bl	8006228 <f_opendir>
}
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08006ec0 	.word	0x08006ec0
 8001624:	08006ec4 	.word	0x08006ec4
 8001628:	08006ee0 	.word	0x08006ee0

0800162c <show_files>:

void show_files(sd_card_t* sd_card, void(*print_callback)(char* text)) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	while (f_readdir(&sd_card->directory, &sd_card->file_info) == FR_OK) {
 8001636:	e01a      	b.n	800166e <show_files+0x42>
		if (sd_card->file_info.fname[0] == 0) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800163e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <show_files+0x22>
			print_callback("end of directory\n");
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <show_files+0x6c>)
 800164a:	4798      	blx	r3
			break;
 800164c:	e01f      	b.n	800168e <show_files+0x62>
		}

		print_callback(sd_card->file_info.fname);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8001654:	330d      	adds	r3, #13
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	4790      	blx	r2
		HAL_Delay(200);
 800165c:	20c8      	movs	r0, #200	; 0xc8
 800165e:	f000 fc09 	bl	8001e74 <HAL_Delay>
		print_callback("\r");
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <show_files+0x70>)
 8001666:	4798      	blx	r3
		HAL_Delay(200);
 8001668:	20c8      	movs	r0, #200	; 0xc8
 800166a:	f000 fc03 	bl	8001e74 <HAL_Delay>
	while (f_readdir(&sd_card->directory, &sd_card->file_info) == FR_OK) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001674:	3320      	adds	r3, #32
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f502 5242 	add.w	r2, r2, #12416	; 0x3080
 800167c:	3204      	adds	r2, #4
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fe63 	bl	800634c <f_readdir>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0d5      	beq.n	8001638 <show_files+0xc>
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08006ef8 	.word	0x08006ef8
 800169c:	08006f0c 	.word	0x08006f0c

080016a0 <new_state_info>:
#include "state.h"
#include "utils.h"

state_info_t* new_state_info() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	state_info_t* state_info = calloc(1, sizeof(state_info_t));
 80016a6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80016aa:	2001      	movs	r0, #1
 80016ac:	f004 fef4 	bl	8006498 <calloc>
 80016b0:	4603      	mov	r3, r0
 80016b2:	607b      	str	r3, [r7, #4]

	clear_buffer(state_info->output_buffer);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fb46 	bl	8001d48 <clear_buffer>

	state_info->algorithm_index = 0;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	669a      	str	r2, [r3, #104]	; 0x68
	state_info->current_state = IDLE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	state_info->deltatime = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	66da      	str	r2, [r3, #108]	; 0x6c

	state_info->uart_write_ptr = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	671a      	str	r2, [r3, #112]	; 0x70
	clear_buffer(state_info->uart_buffer);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3374      	adds	r3, #116	; 0x74
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fb34 	bl	8001d48 <clear_buffer>
	clear_buffer(state_info->reference_checksum);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	33d8      	adds	r3, #216	; 0xd8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fb2f 	bl	8001d48 <clear_buffer>

	return state_info;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <set_state>:

void set_state(state_info_t* state_info, STATE new_state) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	state_info->current_state = new_state;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	reduce_state_change_to_action(state_info);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f84b 	bl	80017a4 <reduce_state_change_to_action>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <set_next_algo>:

void set_next_algo(state_info_t* state_info) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	state_info->algorithm_index += 1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	669a      	str	r2, [r3, #104]	; 0x68
	state_info->algorithm_index %= ALGORITHMS_COUNT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <set_next_algo+0x38>)
 8001730:	fb83 3201 	smull	r3, r2, r3, r1
 8001734:	17cb      	asrs	r3, r1, #31
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	1aca      	subs	r2, r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	55555556 	.word	0x55555556

08001754 <set_prev_algo>:

void set_prev_algo(state_info_t* state_info) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	state_info->algorithm_index -= 1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	669a      	str	r2, [r3, #104]	; 0x68
	if (state_info->algorithm_index == -1) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800176a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176e:	d102      	bne.n	8001776 <set_prev_algo+0x22>
		state_info->algorithm_index = ALGORITHMS_COUNT - 1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	669a      	str	r2, [r3, #104]	; 0x68
	}
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <reduce_state_to_constant_output>:

void reduce_state_to_constant_output(state_info_t* state_info) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if (state_info->current_state != CHOOSE_ALGO) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800178e:	2b02      	cmp	r3, #2
 8001790:	d103      	bne.n	800179a <reduce_state_to_constant_output+0x1a>
		return;
	}

	write_algorithm_name(state_info);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f88e 	bl	80018b4 <write_algorithm_name>
 8001798:	e000      	b.n	800179c <reduce_state_to_constant_output+0x1c>
		return;
 800179a:	bf00      	nop
}
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <reduce_state_change_to_action>:

void reduce_state_change_to_action(state_info_t* state_info) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	switch (state_info->current_state) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80017b2:	3b01      	subs	r3, #1
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d82c      	bhi.n	8001812 <reduce_state_change_to_action+0x6e>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <reduce_state_change_to_action+0x1c>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e1 	.word	0x080017e1
 80017c8:	080017f1 	.word	0x080017f1
 80017cc:	08001803 	.word	0x08001803
	case ENTER_SUM:
		ST7735_FillScreen(ST7735_WHITE);
 80017d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017d4:	f7fe ff28 	bl	8000628 <ST7735_FillScreen>
		write_enter_sum_message(state_info);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f81f 	bl	800181c <write_enter_sum_message>
		break;
 80017de:	e019      	b.n	8001814 <reduce_state_change_to_action+0x70>
	case CHOOSE_ALGO:
		ST7735_FillScreen(ST7735_WHITE);
 80017e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017e4:	f7fe ff20 	bl	8000628 <ST7735_FillScreen>
		write_algorithm_message(state_info);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f83d 	bl	8001868 <write_algorithm_message>
		break;
 80017ee:	e011      	b.n	8001814 <reduce_state_change_to_action+0x70>
	case EXECUTE:
		ST7735_FillScreen(ST7735_WHITE);
 80017f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017f4:	f7fe ff18 	bl	8000628 <ST7735_FillScreen>
		clear_buffer(state_info->output_buffer);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 faa4 	bl	8001d48 <clear_buffer>
		break;
 8001800:	e008      	b.n	8001814 <reduce_state_change_to_action+0x70>
	case OUTPUT:
		ST7735_FillScreen(ST7735_WHITE);
 8001802:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001806:	f7fe ff0f 	bl	8000628 <ST7735_FillScreen>
		write_execution_time(state_info);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f874 	bl	80018f8 <write_execution_time>
		break;
 8001810:	e000      	b.n	8001814 <reduce_state_change_to_action+0x70>
	default:
		break;
 8001812:	bf00      	nop
	}
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <write_enter_sum_message>:

void write_enter_sum_message(state_info_t* state_info) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af04      	add	r7, sp, #16
 8001822:	6078      	str	r0, [r7, #4]
	sprintf(state_info->output_buffer, "Enter reference checksum via terminal");
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <write_enter_sum_message+0x44>)
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fefd 	bl	8006628 <siprintf>
	format_buffer(state_info->output_buffer, TERMINAL_LINE_WIDTH);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	210b      	movs	r1, #11
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fa28 	bl	8001c88 <format_buffer>
	ST7735_DrawString(0, 0, state_info->output_buffer, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <write_enter_sum_message+0x48>)
 800183c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001840:	9202      	str	r2, [sp, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	460a      	mov	r2, r1
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f7fe fdff 	bl	8000454 <ST7735_DrawString>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08006f34 	.word	0x08006f34
 8001864:	20000008 	.word	0x20000008

08001868 <write_algorithm_message>:

void write_algorithm_message(state_info_t* state_info) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af04      	add	r7, sp, #16
 800186e:	6078      	str	r0, [r7, #4]
	sprintf(state_info->output_buffer, "Current algorithm:");
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <write_algorithm_message+0x44>)
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fed7 	bl	8006628 <siprintf>
	format_buffer(state_info->output_buffer, TERMINAL_LINE_WIDTH);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	210b      	movs	r1, #11
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fa02 	bl	8001c88 <format_buffer>
	ST7735_DrawString(0, 0, state_info->output_buffer, Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <write_algorithm_message+0x48>)
 8001888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188c:	9202      	str	r2, [sp, #8]
 800188e:	2200      	movs	r2, #0
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	460a      	mov	r2, r1
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f7fe fdd9 	bl	8000454 <ST7735_DrawString>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	08006f5c 	.word	0x08006f5c
 80018b0:	20000008 	.word	0x20000008

080018b4 <write_algorithm_name>:

void write_algorithm_name(state_info_t* state_info) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af04      	add	r7, sp, #16
 80018ba:	6078      	str	r0, [r7, #4]
	uint16_t y = TERMINAL_LINE_HEIGHT * 2;
 80018bc:	2324      	movs	r3, #36	; 0x24
 80018be:	81fb      	strh	r3, [r7, #14]
	ST7735_DrawString(0, y, algorithms[state_info->algorithm_index], Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <write_algorithm_name+0x3c>)
 80018c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <write_algorithm_name+0x40>)
 80018cc:	89f9      	ldrh	r1, [r7, #14]
 80018ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d2:	9202      	str	r2, [sp, #8]
 80018d4:	2200      	movs	r2, #0
 80018d6:	9201      	str	r2, [sp, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	9200      	str	r2, [sp, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4602      	mov	r2, r0
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7fe fdb7 	bl	8000454 <ST7735_DrawString>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000010 	.word	0x20000010
 80018f4:	20000008 	.word	0x20000008

080018f8 <write_execution_time>:

void write_execution_time(state_info_t* state_info) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_MspInit+0x40>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_MspInit+0x40>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_MspInit+0x40>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_MspInit+0x40>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_MspInit+0x40>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_MspInit+0x40>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_CRC_MspInit+0x34>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10b      	bne.n	800197a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_CRC_MspInit+0x38>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_CRC_MspInit+0x38>)
 8001968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_CRC_MspInit+0x38>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40023000 	.word	0x40023000
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <HAL_SPI_MspInit+0xe0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d124      	bne.n	80019f6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019dc:	23a0      	movs	r3, #160	; 0xa0
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4821      	ldr	r0, [pc, #132]	; (8001a74 <HAL_SPI_MspInit+0xe8>)
 80019f0:	f000 fc7e 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019f4:	e036      	b.n	8001a64 <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <HAL_SPI_MspInit+0xec>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d131      	bne.n	8001a64 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0a:	61d3      	str	r3, [r2, #28]
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_SPI_MspInit+0xe4>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a30:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <HAL_SPI_MspInit+0xf0>)
 8001a46:	f000 fc53 	bl	80022f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <HAL_SPI_MspInit+0xf0>)
 8001a60:	f000 fc46 	bl	80022f0 <HAL_GPIO_Init>
}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40013000 	.word	0x40013000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40003800 	.word	0x40003800
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d137      	bne.n	8001b10 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aaa:	61d3      	str	r3, [r2, #28]
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480f      	ldr	r0, [pc, #60]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001ae4:	f000 fc04 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001afc:	f000 fbf8 	bl	80022f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2026      	movs	r0, #38	; 0x26
 8001b06:	f000 fab0 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0a:	2026      	movs	r0, #38	; 0x26
 8001b0c:	f000 fac9 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800

08001b24 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <SDTimer_Handler+0x3c>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <SDTimer_Handler+0x1c>
    Timer1--;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <SDTimer_Handler+0x3c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SDTimer_Handler+0x3c>)
 8001b3e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <SDTimer_Handler+0x40>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <SDTimer_Handler+0x34>
    Timer2--;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SDTimer_Handler+0x40>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <SDTimer_Handler+0x40>)
 8001b56:	801a      	strh	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	200001b6 	.word	0x200001b6
 8001b64:	200001b8 	.word	0x200001b8

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <SysTick_Handler+0x30>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <SysTick_Handler+0x30>)
 8001bbc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <SysTick_Handler+0x30>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d904      	bls.n	8001bd2 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Handler+0x30>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001bce:	f7ff ffa9 	bl	8001b24 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 f933 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200001b4 	.word	0x200001b4

08001be0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NEXT_ALGO_BUTTON_Pin);
 8001be4:	2020      	movs	r0, #32
 8001be6:	f000 fd1f 	bl	8002628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PREV_ALGO_BUTTON_Pin);
 8001bea:	2040      	movs	r0, #64	; 0x40
 8001bec:	f000 fd1c 	bl	8002628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXECUTE_BUTTON_Pin);
 8001bf0:	2080      	movs	r0, #128	; 0x80
 8001bf2:	f000 fd19 	bl	8002628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <USART2_IRQHandler+0x10>)
 8001c02:	f001 fea5 	bl	8003950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000164 	.word	0x20000164

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f004 fd2a 	bl	8006698 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20005000 	.word	0x20005000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	200001bc 	.word	0x200001bc
 8001c78:	20000340 	.word	0x20000340

08001c7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <format_buffer>:
#include "utils.h"

void format_buffer(char* buffer, size_t line_width) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0a0      	sub	sp, #128	; 0x80
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	char res[DEFAULT_BUFFER_SIZE] = {'\0'};
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	2260      	movs	r2, #96	; 0x60
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fce2 	bl	8006668 <memset>

	size_t shift = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
	size_t len = strlen(buffer);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fa59 	bl	8000160 <strlen>
 8001cae:	6738      	str	r0, [r7, #112]	; 0x70
	for (size_t i = 0; i < len; ++i) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb4:	e03a      	b.n	8001d2c <format_buffer+0xa4>
		if (buffer[i] != ' ') {
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d00b      	beq.n	8001cda <format_buffer+0x52>
			res[i + shift] = buffer[i];
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc6:	441a      	add	r2, r3
 8001cc8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ccc:	440b      	add	r3, r1
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	3380      	adds	r3, #128	; 0x80
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f803 2c78 	strb.w	r2, [r3, #-120]
			continue;
 8001cd8:	e025      	b.n	8001d26 <format_buffer+0x9e>
		}

		size_t spaces_amount = line_width - ((i + shift) % line_width);
 8001cda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cde:	4413      	add	r3, r2
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	fb01 f202 	mul.w	r2, r1, r2
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (size_t j = 0; j < spaces_amount; ++j) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8001cf8:	e00c      	b.n	8001d14 <format_buffer+0x8c>
			res[i + j + shift] = ' ';
 8001cfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfe:	441a      	add	r2, r3
 8001d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d02:	4413      	add	r3, r2
 8001d04:	3380      	adds	r3, #128	; 0x80
 8001d06:	443b      	add	r3, r7
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f803 2c78 	strb.w	r2, [r3, #-120]
		for (size_t j = 0; j < spaces_amount; ++j) {
 8001d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d10:	3301      	adds	r3, #1
 8001d12:	677b      	str	r3, [r7, #116]	; 0x74
 8001d14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d3ee      	bcc.n	8001cfa <format_buffer+0x72>
		}
		shift += spaces_amount - 1;
 8001d1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d20:	4413      	add	r3, r2
 8001d22:	3b01      	subs	r3, #1
 8001d24:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (size_t i = 0; i < len; ++i) {
 8001d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d28:	3301      	adds	r3, #1
 8001d2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3c0      	bcc.n	8001cb6 <format_buffer+0x2e>
	}

	strcpy(buffer, res);
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f004 fcd8 	bl	80066f0 <strcpy>
}
 8001d40:	bf00      	nop
 8001d42:	3780      	adds	r7, #128	; 0x80
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <clear_buffer>:

void clear_buffer(char* buffer) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	memset(buffer, '\0', DEFAULT_BUFFER_SIZE);
 8001d50:	2264      	movs	r2, #100	; 0x64
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 fc87 	bl	8006668 <memset>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d64:	f7ff ff8a 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d6a:	490c      	ldr	r1, [pc, #48]	; (8001d9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d80:	4c09      	ldr	r4, [pc, #36]	; (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f004 fc89 	bl	80066a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d92:	f7ff f94f 	bl	8001034 <main>
  bx lr
 8001d96:	4770      	bx	lr
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001da0:	08007e44 	.word	0x08007e44
  ldr r2, =_sbss
 8001da4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001da8:	20000340 	.word	0x20000340

08001dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_2_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_Init+0x28>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_Init+0x28>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 f947 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fd9e 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f95f 	bl	80020be <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f927 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000001c 	.word	0x2000001c
 8001e34:	20000024 	.word	0x20000024
 8001e38:	20000020 	.word	0x20000020

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x20>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_IncTick+0x20>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000024 	.word	0x20000024
 8001e5c:	200001c0 	.word	0x200001c0

08001e60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_GetTick+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	200001c0 	.word	0x200001c0

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffe0 	bl	8001e60 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000024 	.word	0x20000024

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4906      	ldr	r1, [pc, #24]	; (8001f54 <__NVIC_EnableIRQ+0x34>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f7ff ff90 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff2d 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff42 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff90 	bl	8001fac <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5f 	bl	8001f58 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff35 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e00e      	b.n	8002106 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	795b      	ldrb	r3, [r3, #5]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fc29 	bl	8001950 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2202      	movs	r2, #2
 8002122:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e00a      	b.n	8002150 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	441a      	add	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3f0      	bcc.n	800213a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002166:	693b      	ldr	r3, [r7, #16]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d008      	beq.n	800219c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e020      	b.n	80021de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 020e 	bic.w	r2, r2, #14
 80021aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d005      	beq.n	800220c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e051      	b.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_DMA_Abort_IT+0xd4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d029      	beq.n	800228a <HAL_DMA_Abort_IT+0xa2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_DMA_Abort_IT+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort_IT+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_DMA_Abort_IT+0xdc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01a      	beq.n	8002280 <HAL_DMA_Abort_IT+0x98>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_DMA_Abort_IT+0xe0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d012      	beq.n	800227a <HAL_DMA_Abort_IT+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_DMA_Abort_IT+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x8c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_DMA_Abort_IT+0xe8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d102      	bne.n	800226e <HAL_DMA_Abort_IT+0x86>
 8002268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800226c:	e00e      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800226e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002272:	e00b      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002278:	e008      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	e005      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002284:	e002      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002286:	2310      	movs	r3, #16
 8002288:	e000      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800228a:	2301      	movs	r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_DMA_Abort_IT+0xec>)
 800228e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    } 
  }
  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020008 	.word	0x40020008
 80022c0:	4002001c 	.word	0x4002001c
 80022c4:	40020030 	.word	0x40020030
 80022c8:	40020044 	.word	0x40020044
 80022cc:	40020058 	.word	0x40020058
 80022d0:	4002006c 	.word	0x4002006c
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e169      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8158 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a9a      	ldr	r2, [pc, #616]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d05e      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800232c:	4a98      	ldr	r2, [pc, #608]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d875      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002332:	4a98      	ldr	r2, [pc, #608]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002338:	4a96      	ldr	r2, [pc, #600]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d86f      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d052      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d869      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x2ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04c      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d863      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d046      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d85d      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d82a      	bhi.n	80023bc <HAL_GPIO_Init+0xcc>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d859      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_GPIO_Init+0x80>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d7 	.word	0x080023d7
 800237c:	08002419 	.word	0x08002419
 8002380:	0800241f 	.word	0x0800241f
 8002384:	0800241f 	.word	0x0800241f
 8002388:	0800241f 	.word	0x0800241f
 800238c:	0800241f 	.word	0x0800241f
 8002390:	0800241f 	.word	0x0800241f
 8002394:	0800241f 	.word	0x0800241f
 8002398:	0800241f 	.word	0x0800241f
 800239c:	0800241f 	.word	0x0800241f
 80023a0:	0800241f 	.word	0x0800241f
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	0800241f 	.word	0x0800241f
 80023b0:	0800241f 	.word	0x0800241f
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_GPIO_Init+0x2b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e02c      	b.n	800241e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e029      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e024      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	3308      	adds	r3, #8
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e01f      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e01a      	b.n	8002420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f2:	2304      	movs	r3, #4
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e013      	b.n	8002420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	611a      	str	r2, [r3, #16]
          break;
 800240a:	e009      	b.n	8002420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	615a      	str	r2, [r3, #20]
          break;
 8002416:	e003      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x130>
          break;
 800241e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d801      	bhi.n	800242a <HAL_GPIO_Init+0x13a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <HAL_GPIO_Init+0x13e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d802      	bhi.n	800243c <HAL_GPIO_Init+0x14c>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x152>
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3b08      	subs	r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	210f      	movs	r1, #15
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b1 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_GPIO_Init+0x2c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <HAL_GPIO_Init+0x2c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <HAL_GPIO_Init+0x2c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <HAL_GPIO_Init+0x2cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ee:	492f      	ldr	r1, [pc, #188]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	492c      	ldr	r1, [pc, #176]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4928      	ldr	r1, [pc, #160]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	4914      	ldr	r1, [pc, #80]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x2e2>
 800258e:	bf00      	nop
 8002590:	10320000 	.word	0x10320000
 8002594:	10310000 	.word	0x10310000
 8002598:	10220000 	.word	0x10220000
 800259c:	10210000 	.word	0x10210000
 80025a0:	10120000 	.word	0x10120000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f ae8e 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	; 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fea0 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e272      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002684:	4b8f      	ldr	r3, [pc, #572]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
 8002690:	4b8c      	ldr	r3, [pc, #560]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x12c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e24c      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x76>
 80026c0:	4b80      	ldr	r3, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a7f      	ldr	r2, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a77      	ldr	r2, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xbc>
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd4>
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a67      	ldr	r2, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fb94 	bl	8001e60 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff fb90 	bl	8001e60 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e200      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe4>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff fb80 	bl	8001e60 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff fb7c 	bl	8001e60 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1ec      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x10c>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
 80027aa:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c0      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4939      	ldr	r1, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7ff fb35 	bl	8001e60 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7ff fb31 	bl	8001e60 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x270>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff fb14 	bl	8001e60 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7ff fb10 	bl	8001e60 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e180      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03a      	beq.n	80028dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7ff faf4 	bl	8001e60 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7ff faf0 	bl	8001e60 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e160      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f000 face 	bl	8002e3c <RCC_Delay>
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_OscConfig+0x274>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7ff fada 	bl	8001e60 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff fad6 	bl	8001e60 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d908      	bls.n	80028d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e146      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	42420000 	.word	0x42420000
 80028cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e9      	bne.n	80028b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a6 	beq.w	8002a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a87      	ldr	r2, [pc, #540]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	61d3      	str	r3, [r2, #28]
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7ff fa97 	bl	8001e60 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff fa93 	bl	8001e60 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e103      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x4c8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x312>
 800295c:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e02d      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x334>
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	e01c      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x356>
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x36e>
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6213      	str	r3, [r2, #32]
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7ff fa47 	bl	8001e60 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7ff fa43 	bl	8001e60 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b1      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	4b4b      	ldr	r3, [pc, #300]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ee      	beq.n	80029d6 <HAL_RCC_OscConfig+0x37e>
 80029f8:	e014      	b.n	8002a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7ff fa31 	bl	8001e60 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7ff fa2d 	bl	8001e60 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e09b      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d061      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d146      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fa01 	bl	8001e60 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7ff f9fd 	bl	8001e60 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e06d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d108      	bne.n	8002a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4921      	ldr	r1, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a19      	ldr	r1, [r3, #32]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	430b      	orrs	r3, r1
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7ff f9d1 	bl	8001e60 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7ff f9cd 	bl	8001e60 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46a>
 8002ae0:	e035      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff f9ba 	bl	8001e60 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff f9b6 	bl	8001e60 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e026      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x498>
 8002b0e:	e01e      	b.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e019      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x500>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7ff f908 	bl	8001e60 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7ff f904 	bl	8001e60 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f866 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08007d5c 	.word	0x08007d5c
 8002d28:	2000001c 	.word	0x2000001c
 8002d2c:	20000020 	.word	0x20000020

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5e:	e027      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	613b      	str	r3, [r7, #16]
      break;
 8002d64:	e027      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	fb03 f202 	mul.w	r2, r3, r2
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e004      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	693b      	ldr	r3, [r7, #16]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	08007d74 	.word	0x08007d74
 8002dd0:	08007d84 	.word	0x08007d84
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	2000001c 	.word	0x2000001c

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff2 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007d6c 	.word	0x08007d6c

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08007d6c 	.word	0x08007d6c

08002e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <RCC_Delay+0x34>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <RCC_Delay+0x38>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a5b      	lsrs	r3, r3, #9
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e58:	bf00      	nop
  }
  while (Delay --);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	60fa      	str	r2, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <RCC_Delay+0x1c>
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	2000001c 	.word	0x2000001c
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e076      	b.n	8002f78 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9a:	d009      	beq.n	8002eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	e005      	b.n	8002eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fd5e 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	ea42 0103 	orr.w	r1, r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	0c1a      	lsrs	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f002 0204 	and.w	r2, r2, #4
 8002f56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SPI_Transmit+0x22>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e12d      	b.n	80031fe <HAL_SPI_Transmit+0x27e>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002faa:	f7fe ff59 	bl	8001e60 <HAL_GetTick>
 8002fae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fc4:	e116      	b.n	80031f4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_Transmit+0x52>
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fd6:	e10d      	b.n	80031f4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d10f      	bne.n	8003040 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d007      	beq.n	800305e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003066:	d14f      	bne.n	8003108 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_Transmit+0xf6>
 8003070:	8afb      	ldrh	r3, [r7, #22]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d142      	bne.n	80030fc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800309a:	e02f      	b.n	80030fc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d112      	bne.n	80030d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80030ce:	e015      	b.n	80030fc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030d0:	f7fe fec6 	bl	8001e60 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d803      	bhi.n	80030e8 <HAL_SPI_Transmit+0x168>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d102      	bne.n	80030ee <HAL_SPI_Transmit+0x16e>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030fa:	e07b      	b.n	80031f4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ca      	bne.n	800309c <HAL_SPI_Transmit+0x11c>
 8003106:	e050      	b.n	80031aa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_Transmit+0x196>
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d144      	bne.n	80031a0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800313c:	e030      	b.n	80031a0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d113      	bne.n	8003174 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36
 8003172:	e015      	b.n	80031a0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003174:	f7fe fe74 	bl	8001e60 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d803      	bhi.n	800318c <HAL_SPI_Transmit+0x20c>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d102      	bne.n	8003192 <HAL_SPI_Transmit+0x212>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800319e:	e029      	b.n	80031f4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1c9      	bne.n	800313e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa62 	bl	8003678 <SPI_EndRxTxTransaction>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e003      	b.n	80031f4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08c      	sub	sp, #48	; 0x30
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003214:	2301      	movs	r3, #1
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_SPI_TransmitReceive+0x26>
 8003228:	2302      	movs	r3, #2
 800322a:	e198      	b.n	800355e <HAL_SPI_TransmitReceive+0x358>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003234:	f7fe fe14 	bl	8001e60 <HAL_GetTick>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800324e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003252:	2b01      	cmp	r3, #1
 8003254:	d00f      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x70>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325c:	d107      	bne.n	800326e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_SPI_TransmitReceive+0x68>
 8003266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003274:	e16d      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x82>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x82>
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800328e:	e160      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b04      	cmp	r3, #4
 800329a:	d003      	beq.n	80032a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d007      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003300:	d17c      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x10a>
 800330a:	8b7b      	ldrh	r3, [r7, #26]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d16a      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003334:	e057      	b.n	80033e6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_SPI_TransmitReceive+0x176>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_SPI_TransmitReceive+0x176>
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d113      	bne.n	800337c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d119      	bne.n	80033be <HAL_SPI_TransmitReceive+0x1b8>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d014      	beq.n	80033be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ba:	2301      	movs	r3, #1
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033be:	f7fe fd4f 	bl	8001e60 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d80b      	bhi.n	80033e6 <HAL_SPI_TransmitReceive+0x1e0>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d007      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80033e4:	e0b5      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1a2      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x130>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d19d      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x130>
 80033fa:	e080      	b.n	80034fe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_SPI_TransmitReceive+0x204>
 8003404:	8b7b      	ldrh	r3, [r7, #26]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d16f      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003430:	e05b      	b.n	80034ea <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11c      	bne.n	800347a <HAL_SPI_TransmitReceive+0x274>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d017      	beq.n	800347a <HAL_SPI_TransmitReceive+0x274>
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d114      	bne.n	800347a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d119      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x2b6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034bc:	f7fe fcd0 	bl	8001e60 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d803      	bhi.n	80034d4 <HAL_SPI_TransmitReceive+0x2ce>
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d102      	bne.n	80034da <HAL_SPI_TransmitReceive+0x2d4>
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034e8:	e033      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d19e      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x22c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d199      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8b8 	bl	8003678 <SPI_EndRxTxTransaction>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800351a:	e01a      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003548:	e003      	b.n	8003552 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800355a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003578:	f7fe fc72 	bl	8001e60 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4413      	add	r3, r2
 8003586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003588:	f7fe fc6a 	bl	8001e60 <HAL_GetTick>
 800358c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	0d1b      	lsrs	r3, r3, #20
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359e:	e054      	b.n	800364a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d050      	beq.n	800364a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035a8:	f7fe fc5a 	bl	8001e60 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d902      	bls.n	80035be <SPI_WaitFlagStateUntilTimeout+0x56>
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d13d      	bne.n	800363a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d6:	d111      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e0:	d004      	beq.n	80035ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d107      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003604:	d10f      	bne.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e017      	b.n	800366a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3b01      	subs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	429a      	cmp	r2, r3
 8003666:	d19b      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000001c 	.word	0x2000001c

08003678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff6a 	bl	8003568 <SPI_WaitFlagStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e042      	b.n	800374c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe f9d0 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fdad 	bl	8004258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d121      	bne.n	80037b2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Transmit_IT+0x26>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e01a      	b.n	80037b4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d112      	bne.n	80037fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Receive_IT+0x26>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00b      	b.n	8003800 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fb5a 	bl	8003eae <UART_Start_Receive_IT>
 80037fa:	4603      	mov	r3, r0
 80037fc:	e000      	b.n	8003800 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b09a      	sub	sp, #104	; 0x68
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003826:	667b      	str	r3, [r7, #100]	; 0x64
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003830:	657a      	str	r2, [r7, #84]	; 0x54
 8003832:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	663b      	str	r3, [r7, #96]	; 0x60
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003864:	643a      	str	r2, [r7, #64]	; 0x40
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800386a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	2b01      	cmp	r3, #1
 800387e:	d119      	bne.n	80038b4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d036      	beq.n	8003930 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3314      	adds	r3, #20
 80038e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038e2:	61ba      	str	r2, [r7, #24]
 80038e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6979      	ldr	r1, [r7, #20]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	613b      	str	r3, [r7, #16]
   return(result);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2200      	movs	r2, #0
 8003904:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fc31 	bl	8002172 <HAL_DMA_Abort>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fcdc 	bl	80022d8 <HAL_DMA_GetError>
 8003920:	4603      	mov	r3, r0
 8003922:	2b20      	cmp	r3, #32
 8003924:	d104      	bne.n	8003930 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2210      	movs	r2, #16
 800392a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e00a      	b.n	8003946 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3768      	adds	r7, #104	; 0x68
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b0ba      	sub	sp, #232	; 0xe8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800398e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_UART_IRQHandler+0x66>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb93 	bl	80040da <UART_Receive_IT>
      return;
 80039b4:	e25b      	b.n	8003e6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80de 	beq.w	8003b7c <HAL_UART_IRQHandler+0x22c>
 80039c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80d1 	beq.w	8003b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0xae>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xd2>
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0xf6>
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <HAL_UART_IRQHandler+0x126>
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f043 0208 	orr.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 81f2 	beq.w	8003e64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_UART_IRQHandler+0x14e>
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb1e 	bl	80040da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_UART_IRQHandler+0x17a>
 8003ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04f      	beq.n	8003b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa28 	bl	8003f20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d041      	beq.n	8003b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1d9      	bne.n	8003ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d013      	beq.n	8003b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	4a7e      	ldr	r2, [pc, #504]	; (8003d30 <HAL_UART_IRQHandler+0x3e0>)
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fb52 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b54:	4610      	mov	r0, r2
 8003b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00e      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f993 	bl	8003e86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e00a      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f98f 	bl	8003e86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e006      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f98b 	bl	8003e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b76:	e175      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	bf00      	nop
    return;
 8003b7a:	e173      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 814f 	bne.w	8003e24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8148 	beq.w	8003e24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8141 	beq.w	8003e24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80b6 	beq.w	8003d34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8145 	beq.w	8003e68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be6:	429a      	cmp	r2, r3
 8003be8:	f080 813e 	bcs.w	8003e68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	f000 8088 	beq.w	8003d10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1d9      	bne.n	8003c00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e1      	bne.n	8003c4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e3      	bne.n	8003c88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce0:	f023 0310 	bic.w	r3, r3, #16
 8003ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cf4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fa31 	bl	8002172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8b6 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d2c:	e09c      	b.n	8003e68 <HAL_UART_IRQHandler+0x518>
 8003d2e:	bf00      	nop
 8003d30:	08003fe5 	.word	0x08003fe5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 808e 	beq.w	8003e6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8089 	beq.w	8003e6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e3      	bne.n	8003d5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	623b      	str	r3, [r7, #32]
   return(result);
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003db6:	633a      	str	r2, [r7, #48]	; 0x30
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e3      	bne.n	8003d92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dfc:	61fa      	str	r2, [r7, #28]
 8003dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e3      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f83b 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e22:	e023      	b.n	8003e6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_UART_IRQHandler+0x4f4>
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8e5 	bl	800400c <UART_Transmit_IT>
    return;
 8003e42:	e014      	b.n	8003e6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00e      	beq.n	8003e6e <HAL_UART_IRQHandler+0x51e>
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f924 	bl	80040aa <UART_EndTransmit_IT>
    return;
 8003e62:	e004      	b.n	8003e6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e6c:	bf00      	nop
  }
}
 8003e6e:	37e8      	adds	r7, #232	; 0xe8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2222      	movs	r2, #34	; 0x22
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0220 	orr.w	r2, r2, #32
 8003f12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b095      	sub	sp, #84	; 0x54
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f48:	643a      	str	r2, [r7, #64]	; 0x40
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e5      	bne.n	8003f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d119      	bne.n	8003fcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fb8:	61ba      	str	r2, [r7, #24]
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fda:	bf00      	nop
 8003fdc:	3754      	adds	r7, #84	; 0x54
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff ff41 	bl	8003e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b21      	cmp	r3, #33	; 0x21
 800401e:	d13e      	bne.n	800409e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004028:	d114      	bne.n	8004054 <UART_Transmit_IT+0x48>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d110      	bne.n	8004054 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004046:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]
 8004052:	e008      	b.n	8004066 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6211      	str	r1, [r2, #32]
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29b      	uxth	r3, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4619      	mov	r1, r3
 8004074:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004088:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004098:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fed2 	bl	8003e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08c      	sub	sp, #48	; 0x30
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b22      	cmp	r3, #34	; 0x22
 80040ec:	f040 80ae 	bne.w	800424c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d117      	bne.n	800412a <UART_Receive_IT+0x50>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d113      	bne.n	800412a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004118:	b29a      	uxth	r2, r3
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
 8004128:	e026      	b.n	8004178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d007      	beq.n	800414e <UART_Receive_IT+0x74>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <UART_Receive_IT+0x82>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e008      	b.n	800416e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4619      	mov	r1, r3
 8004186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004188:	2b00      	cmp	r3, #0
 800418a:	d15d      	bne.n	8004248 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0220 	bic.w	r2, r2, #32
 800419a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d135      	bne.n	800423e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f023 0310 	bic.w	r3, r3, #16
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	623a      	str	r2, [r7, #32]
 80041fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	61bb      	str	r3, [r7, #24]
   return(result);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d10a      	bne.n	8004230 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fe2e 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
 800423c:	e002      	b.n	8004244 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f8ce 	bl	80013e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e002      	b.n	800424e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3730      	adds	r7, #48	; 0x30
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004292:	f023 030c 	bic.w	r3, r3, #12
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	430b      	orrs	r3, r1
 800429e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2c      	ldr	r2, [pc, #176]	; (800436c <UART_SetConfig+0x114>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d103      	bne.n	80042c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fe fda8 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	e002      	b.n	80042ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe fd90 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 80042cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009a      	lsls	r2, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <UART_SetConfig+0x118>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	0119      	lsls	r1, r3, #4
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	fbb2 f2f3 	udiv	r2, r2, r3
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <UART_SetConfig+0x118>)
 8004306:	fba3 0302 	umull	r0, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2064      	movs	r0, #100	; 0x64
 800430e:	fb00 f303 	mul.w	r3, r0, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	3332      	adds	r3, #50	; 0x32
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <UART_SetConfig+0x118>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004324:	4419      	add	r1, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f2f3 	udiv	r2, r2, r3
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <UART_SetConfig+0x118>)
 800433e:	fba3 0302 	umull	r0, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2064      	movs	r0, #100	; 0x64
 8004346:	fb00 f303 	mul.w	r3, r0, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	3332      	adds	r3, #50	; 0x32
 8004350:	4a07      	ldr	r2, [pc, #28]	; (8004370 <UART_SetConfig+0x118>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	440a      	add	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40013800 	.word	0x40013800
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <MX_FATFS_Init+0x18>)
 800437a:	4805      	ldr	r0, [pc, #20]	; (8004390 <MX_FATFS_Init+0x1c>)
 800437c:	f002 f87c 	bl	8006478 <FATFS_LinkDriver>
 8004380:	4603      	mov	r3, r0
 8004382:	461a      	mov	r2, r3
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <MX_FATFS_Init+0x20>)
 8004386:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200001c8 	.word	0x200001c8
 8004390:	20000028 	.word	0x20000028
 8004394:	200001c4 	.word	0x200001c4

08004398 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fb21 	bl	80009ec <SD_disk_initialize>
 80043aa:	4603      	mov	r3, r0
 80043ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc fbfe 	bl	8000bc4 <SD_disk_status>
 80043c8:	4603      	mov	r3, r0
 80043ca:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4603      	mov	r3, r0
 80043e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80043e4:	7bf8      	ldrb	r0, [r7, #15]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	f7fc fbfe 	bl	8000bec <SD_disk_read>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800440c:	7bf8      	ldrb	r0, [r7, #15]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	f7fc fc58 	bl	8000cc8 <SD_disk_write>
 8004418:	4603      	mov	r3, r0
 800441a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	603a      	str	r2, [r7, #0]
 800442e:	71fb      	strb	r3, [r7, #7]
 8004430:	460b      	mov	r3, r1
 8004432:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	79b9      	ldrb	r1, [r7, #6]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc fcce 	bl	8000ddc <SD_disk_ioctl>
 8004440:	4603      	mov	r3, r0
 8004442:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <disk_status+0x30>)
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	79fa      	ldrb	r2, [r7, #7]
 8004464:	4905      	ldr	r1, [pc, #20]	; (800447c <disk_status+0x30>)
 8004466:	440a      	add	r2, r1
 8004468:	7a12      	ldrb	r2, [r2, #8]
 800446a:	4610      	mov	r0, r2
 800446c:	4798      	blx	r3
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200001ec 	.word	0x200001ec

08004480 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <disk_initialize+0x48>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <disk_initialize+0x48>)
 800449c:	2101      	movs	r1, #1
 800449e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <disk_initialize+0x48>)
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	79fa      	ldrb	r2, [r7, #7]
 80044ae:	4906      	ldr	r1, [pc, #24]	; (80044c8 <disk_initialize+0x48>)
 80044b0:	440a      	add	r2, r1
 80044b2:	7a12      	ldrb	r2, [r2, #8]
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200001ec 	.word	0x200001ec

080044cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <disk_read+0x3c>)
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	689c      	ldr	r4, [r3, #8]
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <disk_read+0x3c>)
 80044ec:	4413      	add	r3, r2
 80044ee:	7a18      	ldrb	r0, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	47a0      	blx	r4
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd90      	pop	{r4, r7, pc}
 8004506:	bf00      	nop
 8004508:	200001ec 	.word	0x200001ec

0800450c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <disk_write+0x3c>)
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68dc      	ldr	r4, [r3, #12]
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <disk_write+0x3c>)
 800452c:	4413      	add	r3, r2
 800452e:	7a18      	ldrb	r0, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	47a0      	blx	r4
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]
  return res;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	bf00      	nop
 8004548:	200001ec 	.word	0x200001ec

0800454c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	603a      	str	r2, [r7, #0]
 8004556:	71fb      	strb	r3, [r7, #7]
 8004558:	460b      	mov	r3, r1
 800455a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <disk_ioctl+0x38>)
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	79fa      	ldrb	r2, [r7, #7]
 800456a:	4906      	ldr	r1, [pc, #24]	; (8004584 <disk_ioctl+0x38>)
 800456c:	440a      	add	r2, r1
 800456e:	7a10      	ldrb	r0, [r2, #8]
 8004570:	79b9      	ldrb	r1, [r7, #6]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	4798      	blx	r3
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]
  return res;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200001ec 	.word	0x200001ec

08004588 <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004598:	e005      	b.n	80045a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	617a      	str	r2, [r7, #20]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	1e5a      	subs	r2, r3, #1
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f4      	bne.n	800459a <mem_set+0x12>
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80045d4:	bf00      	nop
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	1e5a      	subs	r2, r3, #1
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <mem_cmp+0x40>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	61fa      	str	r2, [r7, #28]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	4619      	mov	r1, r3
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	61ba      	str	r2, [r7, #24]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	1acb      	subs	r3, r1, r3
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ec      	beq.n	80045d6 <mem_cmp+0x1a>
	return r;
 80045fc:	697b      	ldr	r3, [r7, #20]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004612:	e002      	b.n	800461a <chk_chr+0x12>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <chk_chr+0x26>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4293      	cmp	r3, r2
 800462c:	d1f2      	bne.n	8004614 <chk_chr+0xc>
	return *str;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	781b      	ldrb	r3, [r3, #0]
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e02e      	b.n	80046aa <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800464c:	4958      	ldr	r1, [pc, #352]	; (80047b0 <inc_lock+0x174>)
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d11d      	bne.n	80046a4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004668:	4951      	ldr	r1, [pc, #324]	; (80047b0 <inc_lock+0x174>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3304      	adds	r3, #4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004682:	429a      	cmp	r2, r3
 8004684:	d10e      	bne.n	80046a4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004686:	494a      	ldr	r1, [pc, #296]	; (80047b0 <inc_lock+0x174>)
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3308      	adds	r3, #8
 8004696:	881a      	ldrh	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d006      	beq.n	80046b2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d9cd      	bls.n	800464c <inc_lock+0x10>
 80046b0:	e000      	b.n	80046b4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80046b2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d148      	bne.n	800474c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e002      	b.n	80046c6 <inc_lock+0x8a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d809      	bhi.n	80046e0 <inc_lock+0xa4>
 80046cc:	4938      	ldr	r1, [pc, #224]	; (80047b0 <inc_lock+0x174>)
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ef      	bne.n	80046c0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d101      	bne.n	80046ea <inc_lock+0xae>
 80046e6:	2300      	movs	r3, #0
 80046e8:	e05d      	b.n	80047a6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	482f      	ldr	r0, [pc, #188]	; (80047b0 <inc_lock+0x174>)
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4403      	add	r3, r0
 8004700:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004708:	6899      	ldr	r1, [r3, #8]
 800470a:	4829      	ldr	r0, [pc, #164]	; (80047b0 <inc_lock+0x174>)
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4403      	add	r3, r0
 8004718:	3304      	adds	r3, #4
 800471a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	88d8      	ldrh	r0, [r3, #6]
 8004724:	4922      	ldr	r1, [pc, #136]	; (80047b0 <inc_lock+0x174>)
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3308      	adds	r3, #8
 8004734:	4602      	mov	r2, r0
 8004736:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004738:	491d      	ldr	r1, [pc, #116]	; (80047b0 <inc_lock+0x174>)
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	330a      	adds	r3, #10
 8004748:	2200      	movs	r2, #0
 800474a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <inc_lock+0x130>
 8004752:	4917      	ldr	r1, [pc, #92]	; (80047b0 <inc_lock+0x174>)
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	330a      	adds	r3, #10
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <inc_lock+0x130>
 8004768:	2300      	movs	r3, #0
 800476a:	e01c      	b.n	80047a6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <inc_lock+0x14e>
 8004772:	490f      	ldr	r1, [pc, #60]	; (80047b0 <inc_lock+0x174>)
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	330a      	adds	r3, #10
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	b299      	uxth	r1, r3
 8004788:	e001      	b.n	800478e <inc_lock+0x152>
 800478a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800478e:	4808      	ldr	r0, [pc, #32]	; (80047b0 <inc_lock+0x174>)
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4403      	add	r3, r0
 800479c:	330a      	adds	r3, #10
 800479e:	460a      	mov	r2, r1
 80047a0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	200001d4 	.word	0x200001d4

080047b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e016      	b.n	80047f0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80047c2:	4910      	ldr	r1, [pc, #64]	; (8004804 <clear_lock+0x50>)
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d108      	bne.n	80047ea <clear_lock+0x36>
 80047d8:	490a      	ldr	r1, [pc, #40]	; (8004804 <clear_lock+0x50>)
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d9e5      	bls.n	80047c2 <clear_lock+0xe>
	}
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200001d4 	.word	0x200001d4

08004808 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d040      	beq.n	80048a2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004830:	7858      	ldrb	r0, [r3, #1]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	2301      	movs	r3, #1
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	f7ff fe68 	bl	800450c <disk_write>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e02c      	b.n	80048a2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	2200      	movs	r2, #0
 8004850:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	1ad2      	subs	r2, r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	429a      	cmp	r2, r3
 8004868:	d21b      	bcs.n	80048a2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	78db      	ldrb	r3, [r3, #3]
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e012      	b.n	800489c <sync_window+0x94>
					wsect += fs->fsize;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4413      	add	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	7858      	ldrb	r0, [r3, #1]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	2301      	movs	r3, #1
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	f7ff fe3b 	bl	800450c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3b01      	subs	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d8e9      	bhi.n	8004876 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d01e      	beq.n	8004906 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff9d 	bl	8004808 <sync_window>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	7858      	ldrb	r0, [r3, #1]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	2301      	movs	r3, #1
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	f7ff fdf1 	bl	80044cc <disk_read>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	461a      	mov	r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3b02      	subs	r3, #2
 800491e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	3b02      	subs	r3, #2
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d301      	bcc.n	8004934 <clust2sect+0x24>
 8004930:	2300      	movs	r3, #0
 8004932:	e00c      	b.n	800494e <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	789b      	ldrb	r3, [r3, #2]
 800493c:	461a      	mov	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	fb03 f202 	mul.w	r2, r3, r2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4413      	add	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d906      	bls.n	8004976 <get_fat+0x1e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <get_fat+0x24>
		val = 1;	/* Internal error */
 8004976:	2301      	movs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e0e4      	b.n	8004b46 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b03      	cmp	r3, #3
 800498c:	f000 8098 	beq.w	8004ac0 <get_fat+0x168>
 8004990:	2b03      	cmp	r3, #3
 8004992:	f300 80ce 	bgt.w	8004b32 <get_fat+0x1da>
 8004996:	2b01      	cmp	r3, #1
 8004998:	d002      	beq.n	80049a0 <get_fat+0x48>
 800499a:	2b02      	cmp	r3, #2
 800499c:	d05f      	beq.n	8004a5e <get_fat+0x106>
 800499e:	e0c8      	b.n	8004b32 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	895b      	ldrh	r3, [r3, #10]
 80049be:	4619      	mov	r1, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c6:	4413      	add	r3, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff6e 	bl	80048ac <move_window>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 80b0 	bne.w	8004b38 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	60fa      	str	r2, [r7, #12]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049e4:	8952      	ldrh	r2, [r2, #10]
 80049e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ea:	fb01 f202 	mul.w	r2, r1, r2
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	5cd3      	ldrb	r3, [r2, r3]
 80049f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a04:	895b      	ldrh	r3, [r3, #10]
 8004a06:	4619      	mov	r1, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0e:	4413      	add	r3, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ff4a 	bl	80048ac <move_window>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 808e 	bne.w	8004b3c <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	895b      	ldrh	r3, [r3, #10]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a30:	fb01 f202 	mul.w	r2, r1, r2
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	5cd3      	ldrb	r3, [r2, r3]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <get_fat+0xfc>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	e002      	b.n	8004a5a <get_fat+0x102>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5a:	617b      	str	r3, [r7, #20]
			break;
 8004a5c:	e073      	b.n	8004b46 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	895b      	ldrh	r3, [r3, #10]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4619      	mov	r1, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ff14 	bl	80048ac <move_window>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d15a      	bne.n	8004b40 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a94:	8952      	ldrh	r2, [r2, #10]
 8004a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a9a:	fb01 f202 	mul.w	r2, r1, r2
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	b21a      	sxth	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	617b      	str	r3, [r7, #20]
			break;
 8004abe:	e042      	b.n	8004b46 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ace:	895b      	ldrh	r3, [r3, #10]
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004adc:	4413      	add	r3, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fee3 	bl	80048ac <move_window>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d12b      	bne.n	8004b44 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004af6:	8952      	ldrh	r2, [r2, #10]
 8004af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004afc:	fb01 f202 	mul.w	r2, r1, r2
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	061a      	lsls	r2, r3, #24
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	3302      	adds	r3, #2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	3201      	adds	r2, #1
 8004b1e:	7812      	ldrb	r2, [r2, #0]
 8004b20:	0212      	lsls	r2, r2, #8
 8004b22:	4313      	orrs	r3, r2
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	7812      	ldrb	r2, [r2, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b2e:	617b      	str	r3, [r7, #20]
			break;
 8004b30:	e009      	b.n	8004b46 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8004b32:	2301      	movs	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e006      	b.n	8004b46 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b38:	bf00      	nop
 8004b3a:	e004      	b.n	8004b46 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b3c:	bf00      	nop
 8004b3e:	e002      	b.n	8004b46 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b44:	bf00      	nop
		}
	}

	return val;
 8004b46:	697b      	ldr	r3, [r7, #20]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d906      	bls.n	8004b70 <put_fat+0x20>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <put_fat+0x26>
		res = FR_INT_ERR;
 8004b70:	2302      	movs	r3, #2
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e13a      	b.n	8004dec <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	f000 80d0 	beq.w	8004d24 <put_fat+0x1d4>
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	f300 8127 	bgt.w	8004dd8 <put_fat+0x288>
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d003      	beq.n	8004b96 <put_fat+0x46>
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	f000 808f 	beq.w	8004cb2 <put_fat+0x162>
 8004b94:	e120      	b.n	8004dd8 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	895b      	ldrh	r3, [r3, #10]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fe73 	bl	80048ac <move_window>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8106 	bne.w	8004dde <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	617a      	str	r2, [r7, #20]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bde:	8952      	ldrh	r2, [r2, #10]
 8004be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004be4:	fb01 f202 	mul.w	r2, r1, r2
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <put_fat+0xc6>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	b25a      	sxtb	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e001      	b.n	8004c1a <put_fat+0xca>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	2201      	movs	r2, #1
 8004c26:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c36:	895b      	ldrh	r3, [r3, #10]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c40:	4413      	add	r3, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff fe31 	bl	80048ac <move_window>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 80c6 	bne.w	8004de2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	895b      	ldrh	r3, [r3, #10]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c66:	fb01 f202 	mul.w	r2, r1, r2
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <put_fat+0x134>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	091b      	lsrs	r3, r3, #4
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e00e      	b.n	8004ca2 <put_fat+0x152>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b25b      	sxtb	r3, r3
 8004c8a:	f023 030f 	bic.w	r3, r3, #15
 8004c8e:	b25a      	sxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b25b      	sxtb	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	2201      	movs	r2, #1
 8004cae:	711a      	strb	r2, [r3, #4]
			break;
 8004cb0:	e09c      	b.n	8004dec <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	895b      	ldrh	r3, [r3, #10]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cce:	4413      	add	r3, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fdea 	bl	80048ac <move_window>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 8081 	bne.w	8004de6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cee:	8952      	ldrh	r2, [r2, #10]
 8004cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cf4:	fb01 f202 	mul.w	r2, r1, r2
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	2201      	movs	r2, #1
 8004d20:	711a      	strb	r2, [r3, #4]
			break;
 8004d22:	e063      	b.n	8004dec <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	895b      	ldrh	r3, [r3, #10]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d40:	4413      	add	r3, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fdb1 	bl	80048ac <move_window>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d14a      	bne.n	8004dea <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d5e:	8952      	ldrh	r2, [r2, #10]
 8004d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d64:	fb01 f202 	mul.w	r2, r1, r2
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3303      	adds	r3, #3
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	061a      	lsls	r2, r3, #24
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	4313      	orrs	r3, r2
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	3201      	adds	r2, #1
 8004d86:	7812      	ldrb	r2, [r2, #0]
 8004d88:	0212      	lsls	r2, r2, #8
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	7812      	ldrb	r2, [r2, #0]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	3301      	adds	r3, #1
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0c1a      	lsrs	r2, r3, #16
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0e1a      	lsrs	r2, r3, #24
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	3303      	adds	r3, #3
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	711a      	strb	r2, [r3, #4]
			break;
 8004dd6:	e009      	b.n	8004dec <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e006      	b.n	8004dec <put_fat+0x29c>
			if (res != FR_OK) break;
 8004dde:	bf00      	nop
 8004de0:	e004      	b.n	8004dec <put_fat+0x29c>
			if (res != FR_OK) break;
 8004de2:	bf00      	nop
 8004de4:	e002      	b.n	8004dec <put_fat+0x29c>
			if (res != FR_OK) break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <put_fat+0x29c>
			if (res != FR_OK) break;
 8004dea:	bf00      	nop
		}
	}

	return res;
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b086      	sub	sp, #24
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d111      	bne.n	8004e2a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <create_chain+0x2e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d31d      	bcc.n	8004e60 <create_chain+0x6a>
 8004e24:	2301      	movs	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e01a      	b.n	8004e60 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fd93 	bl	8004958 <get_fat>
 8004e32:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d801      	bhi.n	8004e3e <create_chain+0x48>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07f      	b.n	8004f3e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d101      	bne.n	8004e4a <create_chain+0x54>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	e079      	b.n	8004f3e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d201      	bcs.n	8004e5c <create_chain+0x66>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	e070      	b.n	8004f3e <create_chain+0x148>
		scl = clst;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3301      	adds	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d307      	bcc.n	8004e88 <create_chain+0x92>
			ncl = 2;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d901      	bls.n	8004e88 <create_chain+0x92>
 8004e84:	2300      	movs	r3, #0
 8004e86:	e05a      	b.n	8004f3e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fd64 	bl	8004958 <get_fat>
 8004e90:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d002      	beq.n	8004ea6 <create_chain+0xb0>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <create_chain+0xb4>
			return cs;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	e049      	b.n	8004f3e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d1d8      	bne.n	8004e64 <create_chain+0x6e>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e043      	b.n	8004f3e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004eb6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004eb8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fe46 	bl	8004b50 <put_fat>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <create_chain+0xec>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe39 	bl	8004b50 <put_fat>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d121      	bne.n	8004f2c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eee:	461a      	mov	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d01c      	beq.n	8004f3c <create_chain+0x146>
			fs->free_clust--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f12:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	795b      	ldrb	r3, [r3, #5]
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f28:	715a      	strb	r2, [r3, #5]
 8004f2a:	e007      	b.n	8004f3c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d102      	bne.n	8004f38 <create_chain+0x142>
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e000      	b.n	8004f3a <create_chain+0x144>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d009      	beq.n	8004f80 <dir_sdi+0x3a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d301      	bcc.n	8004f84 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004f80:	2302      	movs	r3, #2
 8004f82:	e0aa      	b.n	80050da <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d110      	bne.n	8004fac <dir_sdi+0x66>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d107      	bne.n	8004fac <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbe:	891b      	ldrh	r3, [r3, #8]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d301      	bcc.n	8004fcc <dir_sdi+0x86>
			return FR_INT_ERR;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e086      	b.n	80050da <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e043      	b.n	8005066 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fea:	895b      	ldrh	r3, [r3, #10]
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffe:	789b      	ldrb	r3, [r3, #2]
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005006:	e021      	b.n	800504c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fca0 	bl	8004958 <get_fat>
 8005018:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d101      	bne.n	8005026 <dir_sdi+0xe0>
 8005022:	2301      	movs	r3, #1
 8005024:	e059      	b.n	80050da <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d909      	bls.n	8005040 <dir_sdi+0xfa>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	429a      	cmp	r2, r3
 800503e:	d301      	bcc.n	8005044 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005040:	2302      	movs	r3, #2
 8005042:	e04a      	b.n	80050da <dir_sdi+0x194>
			idx -= ic;
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	429a      	cmp	r2, r3
 8005052:	d2d9      	bcs.n	8005008 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fc56 	bl	8004910 <clust2sect>
 8005064:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506c:	461a      	mov	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <dir_sdi+0x136>
 8005078:	2302      	movs	r3, #2
 800507a:	e02e      	b.n	80050da <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	895b      	ldrh	r3, [r3, #10]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	fbb3 f2f2 	udiv	r2, r3, r2
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050a0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	895b      	ldrh	r3, [r3, #10]
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80050c6:	fb01 f202 	mul.w	r2, r1, r2
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	015b      	lsls	r3, r3, #5
 80050ce:	4403      	add	r3, r0
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050d6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80050e2:	b590      	push	{r4, r7, lr}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f2:	88db      	ldrh	r3, [r3, #6]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <dir_next+0x2a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <dir_next+0x2e>
		return FR_NO_FILE;
 800510c:	2304      	movs	r3, #4
 800510e:	e12e      	b.n	800536e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511c:	895b      	ldrh	r3, [r3, #10]
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	fbb3 f1f2 	udiv	r1, r3, r2
 800512a:	fb01 f202 	mul.w	r2, r1, r2
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 80fa 	bne.w	800532a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	3301      	adds	r3, #1
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005146:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005160:	891b      	ldrh	r3, [r3, #8]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4293      	cmp	r3, r2
 8005168:	f0c0 80df 	bcc.w	800532a <dir_next+0x248>
				return FR_NO_FILE;
 800516c:	2304      	movs	r3, #4
 800516e:	e0fe      	b.n	800536e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	895b      	ldrh	r3, [r3, #10]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	b29b      	uxth	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005196:	7892      	ldrb	r2, [r2, #2]
 8005198:	3a01      	subs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 80c4 	bne.w	800532a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7ff fbcf 	bl	8004958 <get_fat>
 80051ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d801      	bhi.n	80051c6 <dir_next+0xe4>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e0d3      	b.n	800536e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d101      	bne.n	80051d2 <dir_next+0xf0>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0cd      	b.n	800536e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	f0c0 808e 	bcc.w	8005304 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <dir_next+0x110>
 80051ee:	2304      	movs	r3, #4
 80051f0:	e0bd      	b.n	800536e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7ff fdf6 	bl	8004df6 <create_chain>
 800520a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <dir_next+0x134>
 8005212:	2307      	movs	r3, #7
 8005214:	e0ab      	b.n	800536e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <dir_next+0x13e>
 800521c:	2302      	movs	r3, #2
 800521e:	e0a6      	b.n	800536e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d101      	bne.n	800522c <dir_next+0x14a>
 8005228:	2301      	movs	r3, #1
 800522a:	e0a0      	b.n	800536e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fae7 	bl	8004808 <sync_window>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <dir_next+0x162>
 8005240:	2301      	movs	r3, #1
 8005242:	e094      	b.n	800536e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525a:	895b      	ldrh	r3, [r3, #10]
 800525c:	461a      	mov	r2, r3
 800525e:	2100      	movs	r1, #0
 8005260:	f7ff f992 	bl	8004588 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	681c      	ldr	r4, [r3, #0]
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	4610      	mov	r0, r2
 8005278:	f7ff fb4a 	bl	8004910 <clust2sect>
 800527c:	4603      	mov	r3, r0
 800527e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005282:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e021      	b.n	80052ce <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005296:	2201      	movs	r2, #1
 8005298:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fab0 	bl	8004808 <sync_window>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <dir_next+0x1d0>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e05d      	b.n	800536e <dir_next+0x28c>
						dp->fs->winsect++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80052be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052c0:	3201      	adds	r2, #1
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	3301      	adds	r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052da:	789b      	ldrb	r3, [r3, #2]
 80052dc:	461a      	mov	r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d3d2      	bcc.n	800528a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1acb      	subs	r3, r1, r3
 80052fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005302:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	461a      	mov	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff faf8 	bl	8004910 <clust2sect>
 8005320:	4602      	mov	r2, r0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	b29a      	uxth	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005334:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534c:	895b      	ldrh	r3, [r3, #10]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	fbb3 f1f2 	udiv	r1, r3, r2
 800535a:	fb01 f202 	mul.w	r2, r1, r2
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	015b      	lsls	r3, r3, #5
 8005362:	4403      	add	r3, r0
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800536a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}

08005376 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	331b      	adds	r3, #27
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	b21a      	sxth	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	331a      	adds	r3, #26
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b21b      	sxth	r3, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	b21b      	sxth	r3, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d10f      	bne.n	80053c6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3315      	adds	r3, #21
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	b21a      	sxth	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

	return cl;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053da:	2100      	movs	r1, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fdb2 	bl	8004f46 <dir_sdi>
 80053e2:	4603      	mov	r3, r0
 80053e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <dir_find+0x1e>
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	e03f      	b.n	8005470 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7ff fa52 	bl	80048ac <move_window>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d12a      	bne.n	8005468 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <dir_find+0x5c>
 8005428:	2304      	movs	r3, #4
 800542a:	75fb      	strb	r3, [r7, #23]
 800542c:	e01f      	b.n	800546e <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	330b      	adds	r3, #11
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <dir_find+0x82>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	220b      	movs	r2, #11
 8005446:	4619      	mov	r1, r3
 8005448:	6938      	ldr	r0, [r7, #16]
 800544a:	f7ff f8b7 	bl	80045bc <mem_cmp>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005454:	2100      	movs	r1, #0
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff fe43 	bl	80050e2 <dir_next>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c4      	beq.n	80053f0 <dir_find+0x1e>
 8005466:	e002      	b.n	800546e <dir_find+0x9c>
		if (res != FR_OK) break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <dir_find+0x9c>
			break;
 800546c:	bf00      	nop

	return res;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8005482:	2304      	movs	r3, #4
 8005484:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8005486:	e03f      	b.n	8005508 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f7ff fa06 	bl	80048ac <move_window>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d135      	bne.n	8005516 <dir_read+0x9e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <dir_read+0x4e>
 80054c0:	2304      	movs	r3, #4
 80054c2:	75fb      	strb	r3, [r7, #23]
 80054c4:	e02c      	b.n	8005520 <dir_read+0xa8>
		a = dir[DIR_Attr] & AM_MASK;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	330b      	adds	r3, #11
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2be5      	cmp	r3, #229	; 0xe5
 80054d6:	d00e      	beq.n	80054f6 <dir_read+0x7e>
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d00b      	beq.n	80054f6 <dir_read+0x7e>
 80054de:	7bbb      	ldrb	r3, [r7, #14]
 80054e0:	f023 0320 	bic.w	r3, r3, #32
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d011      	beq.n	800551a <dir_read+0xa2>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80054f6:	2100      	movs	r1, #0
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fdf2 	bl	80050e2 <dir_next>
 80054fe:	4603      	mov	r3, r0
 8005500:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <dir_read+0xa6>
	while (dp->sect) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1b9      	bne.n	8005488 <dir_read+0x10>
 8005514:	e004      	b.n	8005520 <dir_read+0xa8>
		if (res != FR_OK) break;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <dir_read+0xa8>
			break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <dir_read+0xa8>
		if (res != FR_OK) break;
 800551e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <dir_read+0xba>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6113      	str	r3, [r2, #16]

	return res;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3309      	adds	r3, #9
 800554a:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05b      	beq.n	8005610 <get_fileinfo+0xd4>
		dir = dp->dir;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	60bb      	str	r3, [r7, #8]
		i = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8005566:	e01c      	b.n	80055a2 <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	617a      	str	r2, [r7, #20]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4413      	add	r3, r2
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b20      	cmp	r3, #32
 800557a:	d100      	bne.n	800557e <get_fileinfo+0x42>
 800557c:	e011      	b.n	80055a2 <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d101      	bne.n	8005588 <get_fileinfo+0x4c>
 8005584:	23e5      	movs	r3, #229	; 0xe5
 8005586:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b09      	cmp	r3, #9
 800558c:	d104      	bne.n	8005598 <get_fileinfo+0x5c>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	613a      	str	r2, [r7, #16]
 8005594:	222e      	movs	r2, #46	; 0x2e
 8005596:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	613a      	str	r2, [r7, #16]
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b0a      	cmp	r3, #10
 80055a6:	d9df      	bls.n	8005568 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	7ada      	ldrb	r2, [r3, #11]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	331f      	adds	r3, #31
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	061a      	lsls	r2, r3, #24
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	331e      	adds	r3, #30
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	4313      	orrs	r3, r2
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	321d      	adds	r2, #29
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	0212      	lsls	r2, r2, #8
 80055ca:	4313      	orrs	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	321c      	adds	r2, #28
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	3319      	adds	r3, #25
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	b21a      	sxth	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3318      	adds	r3, #24
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	b21b      	sxth	r3, r3
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3317      	adds	r3, #23
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3316      	adds	r3, #22
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b21b      	sxth	r3, r3
 8005606:	4313      	orrs	r3, r2
 8005608:	b21b      	sxth	r3, r3
 800560a:	b29a      	uxth	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e002      	b.n	8005638 <create_name+0x18>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b2f      	cmp	r3, #47	; 0x2f
 800563e:	d0f8      	beq.n	8005632 <create_name+0x12>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b5c      	cmp	r3, #92	; 0x5c
 8005646:	d0f4      	beq.n	8005632 <create_name+0x12>
	sfn = dp->fn;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005652:	220b      	movs	r2, #11
 8005654:	2120      	movs	r1, #32
 8005656:	68b8      	ldr	r0, [r7, #8]
 8005658:	f7fe ff96 	bl	8004588 <mem_set>
	si = i = b = 0; ni = 8;
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	2308      	movs	r3, #8
 800566a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b2e      	cmp	r3, #46	; 0x2e
 8005676:	d12f      	bne.n	80056d8 <create_name+0xb8>
		for (;;) {
			c = (BYTE)p[si++];
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	617a      	str	r2, [r7, #20]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 8005686:	7fbb      	ldrb	r3, [r7, #30]
 8005688:	2b2e      	cmp	r3, #46	; 0x2e
 800568a:	d10a      	bne.n	80056a2 <create_name+0x82>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d807      	bhi.n	80056a2 <create_name+0x82>
			sfn[i++] = c;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	613a      	str	r2, [r7, #16]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	7fba      	ldrb	r2, [r7, #30]
 800569e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80056a0:	e7ea      	b.n	8005678 <create_name+0x58>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80056a2:	7fbb      	ldrb	r3, [r7, #30]
 80056a4:	2b2f      	cmp	r3, #47	; 0x2f
 80056a6:	d007      	beq.n	80056b8 <create_name+0x98>
 80056a8:	7fbb      	ldrb	r3, [r7, #30]
 80056aa:	2b5c      	cmp	r3, #92	; 0x5c
 80056ac:	d004      	beq.n	80056b8 <create_name+0x98>
 80056ae:	7fbb      	ldrb	r3, [r7, #30]
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d901      	bls.n	80056b8 <create_name+0x98>
 80056b4:	2306      	movs	r3, #6
 80056b6:	e0a2      	b.n	80057fe <create_name+0x1de>
		*path = &p[si];									/* Return pointer to the next segment */
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	441a      	add	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 80056c2:	7fbb      	ldrb	r3, [r7, #30]
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d801      	bhi.n	80056cc <create_name+0xac>
 80056c8:	2224      	movs	r2, #36	; 0x24
 80056ca:	e000      	b.n	80056ce <create_name+0xae>
 80056cc:	2220      	movs	r2, #32
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	330b      	adds	r3, #11
 80056d2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e092      	b.n	80057fe <create_name+0x1de>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	617a      	str	r2, [r7, #20]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80056e6:	7fbb      	ldrb	r3, [r7, #30]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d953      	bls.n	8005794 <create_name+0x174>
 80056ec:	7fbb      	ldrb	r3, [r7, #30]
 80056ee:	2b2f      	cmp	r3, #47	; 0x2f
 80056f0:	d050      	beq.n	8005794 <create_name+0x174>
 80056f2:	7fbb      	ldrb	r3, [r7, #30]
 80056f4:	2b5c      	cmp	r3, #92	; 0x5c
 80056f6:	d04d      	beq.n	8005794 <create_name+0x174>
		if (c == '.' || i >= ni) {
 80056f8:	7fbb      	ldrb	r3, [r7, #30]
 80056fa:	2b2e      	cmp	r3, #46	; 0x2e
 80056fc:	d003      	beq.n	8005706 <create_name+0xe6>
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d30f      	bcc.n	8005726 <create_name+0x106>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d102      	bne.n	8005712 <create_name+0xf2>
 800570c:	7fbb      	ldrb	r3, [r7, #30]
 800570e:	2b2e      	cmp	r3, #46	; 0x2e
 8005710:	d001      	beq.n	8005716 <create_name+0xf6>
 8005712:	2306      	movs	r3, #6
 8005714:	e073      	b.n	80057fe <create_name+0x1de>
			i = 8; ni = 11;
 8005716:	2308      	movs	r3, #8
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	230b      	movs	r3, #11
 800571c:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e035      	b.n	8005792 <create_name+0x172>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005726:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da08      	bge.n	8005740 <create_name+0x120>
			b |= 3;						/* Eliminate NT flag */
 800572e:	7ffb      	ldrb	r3, [r7, #31]
 8005730:	f043 0303 	orr.w	r3, r3, #3
 8005734:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005736:	7fbb      	ldrb	r3, [r7, #30]
 8005738:	3b80      	subs	r3, #128	; 0x80
 800573a:	4a33      	ldr	r2, [pc, #204]	; (8005808 <create_name+0x1e8>)
 800573c:	5cd3      	ldrb	r3, [r2, r3]
 800573e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005740:	7fbb      	ldrb	r3, [r7, #30]
 8005742:	4619      	mov	r1, r3
 8005744:	4831      	ldr	r0, [pc, #196]	; (800580c <create_name+0x1ec>)
 8005746:	f7fe ff5f 	bl	8004608 <chk_chr>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <create_name+0x134>
				return FR_INVALID_NAME;
 8005750:	2306      	movs	r3, #6
 8005752:	e054      	b.n	80057fe <create_name+0x1de>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005754:	7fbb      	ldrb	r3, [r7, #30]
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d907      	bls.n	800576a <create_name+0x14a>
 800575a:	7fbb      	ldrb	r3, [r7, #30]
 800575c:	2b5a      	cmp	r3, #90	; 0x5a
 800575e:	d804      	bhi.n	800576a <create_name+0x14a>
				b |= 2;
 8005760:	7ffb      	ldrb	r3, [r7, #31]
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e00c      	b.n	8005784 <create_name+0x164>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800576a:	7fbb      	ldrb	r3, [r7, #30]
 800576c:	2b60      	cmp	r3, #96	; 0x60
 800576e:	d909      	bls.n	8005784 <create_name+0x164>
 8005770:	7fbb      	ldrb	r3, [r7, #30]
 8005772:	2b7a      	cmp	r3, #122	; 0x7a
 8005774:	d806      	bhi.n	8005784 <create_name+0x164>
					b |= 1; c -= 0x20;
 8005776:	7ffb      	ldrb	r3, [r7, #31]
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	7fbb      	ldrb	r3, [r7, #30]
 8005780:	3b20      	subs	r3, #32
 8005782:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	613a      	str	r2, [r7, #16]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	7fba      	ldrb	r2, [r7, #30]
 8005790:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005792:	e7a1      	b.n	80056d8 <create_name+0xb8>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	441a      	add	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800579e:	7fbb      	ldrb	r3, [r7, #30]
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d801      	bhi.n	80057a8 <create_name+0x188>
 80057a4:	2304      	movs	r3, #4
 80057a6:	e000      	b.n	80057aa <create_name+0x18a>
 80057a8:	2300      	movs	r3, #0
 80057aa:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <create_name+0x196>
 80057b2:	2306      	movs	r3, #6
 80057b4:	e023      	b.n	80057fe <create_name+0x1de>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2be5      	cmp	r3, #229	; 0xe5
 80057bc:	d102      	bne.n	80057c4 <create_name+0x1a4>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2205      	movs	r2, #5
 80057c2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d102      	bne.n	80057d0 <create_name+0x1b0>
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d103      	bne.n	80057e2 <create_name+0x1c2>
 80057da:	7fbb      	ldrb	r3, [r7, #30]
 80057dc:	f043 0310 	orr.w	r3, r3, #16
 80057e0:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
 80057e4:	f003 030c 	and.w	r3, r3, #12
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d103      	bne.n	80057f4 <create_name+0x1d4>
 80057ec:	7fbb      	ldrb	r3, [r7, #30]
 80057ee:	f043 0308 	orr.w	r3, r3, #8
 80057f2:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	330b      	adds	r3, #11
 80057f8:	7fba      	ldrb	r2, [r7, #30]
 80057fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80057fc:	2300      	movs	r3, #0
#endif
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	08007d88 	.word	0x08007d88
 800580c:	08006f70 	.word	0x08006f70

08005810 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b2f      	cmp	r3, #47	; 0x2f
 8005820:	d003      	beq.n	800582a <follow_path+0x1a>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b5c      	cmp	r3, #92	; 0x5c
 8005828:	d109      	bne.n	800583e <follow_path+0x2e>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	461a      	mov	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	6093      	str	r3, [r2, #8]
 800583c:	e00a      	b.n	8005854 <follow_path+0x44>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005852:	6093      	str	r3, [r2, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b1f      	cmp	r3, #31
 800585a:	d80c      	bhi.n	8005876 <follow_path+0x66>
		res = dir_sdi(dp, 0);
 800585c:	2100      	movs	r1, #0
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fb71 	bl	8004f46 <dir_sdi>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6153      	str	r3, [r2, #20]
 8005874:	e064      	b.n	8005940 <follow_path+0x130>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005876:	463b      	mov	r3, r7
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fed0 	bl	8005620 <create_name>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d155      	bne.n	8005936 <follow_path+0x126>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fda1 	bl	80053d2 <dir_find>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	7adb      	ldrb	r3, [r3, #11]
 800589e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d023      	beq.n	80058ee <follow_path+0xde>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d146      	bne.n	800593a <follow_path+0x12a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d013      	beq.n	80058de <follow_path+0xce>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6093      	str	r3, [r2, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6153      	str	r3, [r2, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02c      	beq.n	8005932 <follow_path+0x122>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80058dc:	e02d      	b.n	800593a <follow_path+0x12a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d128      	bne.n	800593a <follow_path+0x12a>
 80058e8:	2305      	movs	r3, #5
 80058ea:	73fb      	strb	r3, [r7, #15]
				break;
 80058ec:	e025      	b.n	800593a <follow_path+0x12a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d122      	bne.n	800593e <follow_path+0x12e>
			dir = dp->dir;						/* Follow the sub-directory */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	330b      	adds	r3, #11
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <follow_path+0x106>
				res = FR_NO_PATH; break;
 8005910:	2305      	movs	r3, #5
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e014      	b.n	8005940 <follow_path+0x130>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fd28 	bl	8005376 <ld_clust>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	e7a1      	b.n	8005876 <follow_path+0x66>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005932:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005934:	e79f      	b.n	8005876 <follow_path+0x66>
			if (res != FR_OK) break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <follow_path+0x130>
				break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <follow_path+0x130>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800593e:	bf00      	nop
		}
	}

	return res;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800594a:	b480      	push	{r7}
 800594c:	b087      	sub	sp, #28
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d031      	beq.n	80059c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e002      	b.n	800596e <get_ldnumber+0x24>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3301      	adds	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b20      	cmp	r3, #32
 8005974:	d903      	bls.n	800597e <get_ldnumber+0x34>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b3a      	cmp	r3, #58	; 0x3a
 800597c:	d1f4      	bne.n	8005968 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b3a      	cmp	r3, #58	; 0x3a
 8005984:	d11c      	bne.n	80059c0 <get_ldnumber+0x76>
			tp = *path;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	60fa      	str	r2, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	3b30      	subs	r3, #48	; 0x30
 8005996:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b09      	cmp	r3, #9
 800599c:	d80e      	bhi.n	80059bc <get_ldnumber+0x72>
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d10a      	bne.n	80059bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <get_ldnumber+0x72>
					vol = (int)i;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3301      	adds	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	e002      	b.n	80059c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059c4:	693b      	ldr	r3, [r7, #16]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e0:	2200      	movs	r2, #0
 80059e2:	711a      	strb	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ea:	461a      	mov	r2, r3
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fe ff59 	bl	80048ac <move_window>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <check_fs+0x34>
		return 3;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e04a      	b.n	8005a9a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	b21a      	sxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <check_fs+0xd4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d001      	beq.n	8005a28 <check_fs+0x58>
		return 2;
 8005a24:	2302      	movs	r3, #2
 8005a26:	e038      	b.n	8005a9a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3336      	adds	r3, #54	; 0x36
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3336      	adds	r3, #54	; 0x36
 8005a36:	3302      	adds	r3, #2
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	3236      	adds	r2, #54	; 0x36
 8005a42:	3201      	adds	r2, #1
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	0212      	lsls	r2, r2, #8
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <check_fs+0xd8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <check_fs+0x90>
		return 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e01c      	b.n	8005a9a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3352      	adds	r3, #82	; 0x52
 8005a64:	3303      	adds	r3, #3
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	061a      	lsls	r2, r3, #24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3352      	adds	r3, #82	; 0x52
 8005a6e:	3302      	adds	r3, #2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	4313      	orrs	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	3252      	adds	r2, #82	; 0x52
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	7812      	ldrb	r2, [r2, #0]
 8005a7e:	0212      	lsls	r2, r2, #8
 8005a80:	4313      	orrs	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a8e:	4a06      	ldr	r2, [pc, #24]	; (8005aa8 <check_fs+0xd8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d101      	bne.n	8005a98 <check_fs+0xc8>
		return 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <check_fs+0xca>

	return 1;
 8005a98:	2301      	movs	r3, #1
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	ffffaa55 	.word	0xffffaa55
 8005aa8:	00544146 	.word	0x00544146

08005aac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b096      	sub	sp, #88	; 0x58
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ac0:	68b8      	ldr	r0, [r7, #8]
 8005ac2:	f7ff ff42 	bl	800594a <get_ldnumber>
 8005ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da01      	bge.n	8005ad2 <find_volume+0x26>
 8005ace:	230b      	movs	r3, #11
 8005ad0:	e317      	b.n	8006102 <find_volume+0x656>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ad2:	4a98      	ldr	r2, [pc, #608]	; (8005d34 <find_volume+0x288>)
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ada:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <find_volume+0x3a>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	e30d      	b.n	8006102 <find_volume+0x656>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aea:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fca3 	bl	800444c <disk_status>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <find_volume+0x82>
 8005b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	e2e9      	b.n	8006102 <find_volume+0x656>
			return FR_OK;				/* The file system object is valid */
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e2e7      	b.n	8006102 <find_volume+0x656>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fc95 	bl	8004480 <disk_initialize>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e2ca      	b.n	8006102 <find_volume+0x656>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <find_volume+0xd6>
 8005b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e2bf      	b.n	8006102 <find_volume+0x656>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b88:	7858      	ldrb	r0, [r3, #1]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	330a      	adds	r3, #10
 8005b92:	461a      	mov	r2, r3
 8005b94:	2102      	movs	r1, #2
 8005b96:	f7fe fcd9 	bl	800454c <disk_ioctl>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10d      	bne.n	8005bbc <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bac:	d306      	bcc.n	8005bbc <find_volume+0x110>
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	895b      	ldrh	r3, [r3, #10]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d901      	bls.n	8005bc0 <find_volume+0x114>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e2a0      	b.n	8006102 <find_volume+0x656>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005bc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bc8:	f7ff ff02 	bl	80059d0 <check_fs>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d153      	bne.n	8005c82 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005bda:	2300      	movs	r3, #0
 8005bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bde:	e028      	b.n	8005c32 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005bea:	4413      	add	r3, r2
 8005bec:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <find_volume+0x172>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	330b      	adds	r3, #11
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	061a      	lsls	r2, r3, #24
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	330a      	adds	r3, #10
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0c:	3209      	adds	r2, #9
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	0212      	lsls	r2, r2, #8
 8005c12:	4313      	orrs	r3, r2
 8005c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c16:	3208      	adds	r2, #8
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	e000      	b.n	8005c20 <find_volume+0x174>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	3358      	adds	r3, #88	; 0x58
 8005c26:	443b      	add	r3, r7
 8005c28:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	3301      	adds	r3, #1
 8005c30:	643b      	str	r3, [r7, #64]	; 0x40
 8005c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d9d3      	bls.n	8005be0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <find_volume+0x19c>
 8005c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c44:	3b01      	subs	r3, #1
 8005c46:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	3358      	adds	r3, #88	; 0x58
 8005c4e:	443b      	add	r3, r7
 8005c50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <find_volume+0x1bc>
 8005c5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c60:	f7ff feb6 	bl	80059d0 <check_fs>
 8005c64:	4603      	mov	r3, r0
 8005c66:	e000      	b.n	8005c6a <find_volume+0x1be>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005c6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <find_volume+0x1d6>
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	3301      	adds	r3, #1
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d9e2      	bls.n	8005c48 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d101      	bne.n	8005c8e <find_volume+0x1e2>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e239      	b.n	8006102 <find_volume+0x656>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <find_volume+0x1ee>
 8005c96:	230d      	movs	r3, #13
 8005c98:	e233      	b.n	8006102 <find_volume+0x656>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	7b1b      	ldrb	r3, [r3, #12]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	b21a      	sxth	r2, r3
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	7adb      	ldrb	r3, [r3, #11]
 8005ca6:	b21b      	sxth	r3, r3
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	b21a      	sxth	r2, r3
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	895b      	ldrh	r3, [r3, #10]
 8005cb4:	b21b      	sxth	r3, r3
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d001      	beq.n	8005cbe <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8005cba:	230d      	movs	r3, #13
 8005cbc:	e221      	b.n	8006102 <find_volume+0x656>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	7ddb      	ldrb	r3, [r3, #23]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b21a      	sxth	r2, r3
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	7d9b      	ldrb	r3, [r3, #22]
 8005cca:	b21b      	sxth	r3, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b21b      	sxth	r3, r3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d112      	bne.n	8005d00 <find_volume+0x254>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005ce0:	061a      	lsls	r2, r3, #24
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	4313      	orrs	r3, r2
 8005cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cee:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005cf2:	0212      	lsls	r2, r2, #8
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d06:	461a      	mov	r2, r3
 8005d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0a:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	7c1a      	ldrb	r2, [r3, #16]
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d16:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d009      	beq.n	8005d38 <find_volume+0x28c>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2a:	78db      	ldrb	r3, [r3, #3]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d003      	beq.n	8005d38 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8005d30:	230d      	movs	r3, #13
 8005d32:	e1e6      	b.n	8006102 <find_volume+0x656>
 8005d34:	200001cc 	.word	0x200001cc
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	fb02 f303 	mul.w	r3, r2, r3
 8005d48:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	7b5a      	ldrb	r2, [r3, #13]
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5c:	789b      	ldrb	r3, [r3, #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <find_volume+0x2d0>
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	789b      	ldrb	r3, [r3, #2]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	789b      	ldrb	r3, [r3, #2]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8005d7c:	230d      	movs	r3, #13
 8005d7e:	e1c0      	b.n	8006102 <find_volume+0x656>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d82:	7c9b      	ldrb	r3, [r3, #18]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	7c5b      	ldrb	r3, [r3, #17]
 8005d8c:	b21b      	sxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005daa:	8952      	ldrh	r2, [r2, #10]
 8005dac:	0952      	lsrs	r2, r2, #5
 8005dae:	b292      	uxth	r2, r2
 8005db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005db4:	fb01 f202 	mul.w	r2, r1, r2
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8005dc0:	230d      	movs	r3, #13
 8005dc2:	e19e      	b.n	8006102 <find_volume+0x656>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	7d1b      	ldrb	r3, [r3, #20]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	b21a      	sxth	r2, r3
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	7cdb      	ldrb	r3, [r3, #19]
 8005dd0:	b21b      	sxth	r3, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b21b      	sxth	r3, r3
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d112      	bne.n	8005e06 <find_volume+0x35a>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005de6:	061a      	lsls	r2, r3, #24
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	4313      	orrs	r3, r2
 8005df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005df8:	0212      	lsls	r2, r2, #8
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	7bdb      	ldrb	r3, [r3, #15]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	b21a      	sxth	r2, r3
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	7b9b      	ldrb	r3, [r3, #14]
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005e1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <find_volume+0x378>
 8005e20:	230d      	movs	r3, #13
 8005e22:	e16e      	b.n	8006102 <find_volume+0x656>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005e24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	4413      	add	r3, r2
 8005e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e30:	8911      	ldrh	r1, [r2, #8]
 8005e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e38:	8952      	ldrh	r2, [r2, #10]
 8005e3a:	0952      	lsrs	r2, r2, #5
 8005e3c:	b292      	uxth	r2, r2
 8005e3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8005e42:	b292      	uxth	r2, r2
 8005e44:	4413      	add	r3, r2
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d201      	bcs.n	8005e54 <find_volume+0x3a8>
 8005e50:	230d      	movs	r3, #13
 8005e52:	e156      	b.n	8006102 <find_volume+0x656>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e60:	7892      	ldrb	r2, [r2, #2]
 8005e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <find_volume+0x3c6>
 8005e6e:	230d      	movs	r3, #13
 8005e70:	e147      	b.n	8006102 <find_volume+0x656>
	fmt = FS_FAT12;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d902      	bls.n	8005e88 <find_volume+0x3dc>
 8005e82:	2302      	movs	r3, #2
 8005e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d902      	bls.n	8005e98 <find_volume+0x3ec>
 8005e92:	2303      	movs	r3, #3
 8005e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ea2:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eae:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005eb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb4:	4413      	add	r3, r2
 8005eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ebc:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 8005ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	4413      	add	r3, r2
 8005ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eca:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 8005ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d124      	bne.n	8005f1e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	891b      	ldrh	r3, [r3, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <find_volume+0x438>
 8005ee0:	230d      	movs	r3, #13
 8005ee2:	e10e      	b.n	8006102 <find_volume+0x656>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005eea:	061a      	lsls	r2, r3, #24
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005efc:	0212      	lsls	r2, r2, #8
 8005efe:	4313      	orrs	r3, r2
 8005f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f02:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005f06:	4313      	orrs	r3, r2
 8005f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f0e:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	e02b      	b.n	8005f76 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f24:	891b      	ldrh	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <find_volume+0x482>
 8005f2a:	230d      	movs	r3, #13
 8005f2c:	e0e9      	b.n	8006102 <find_volume+0x656>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	4413      	add	r3, r2
 8005f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f40:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d105      	bne.n	8005f56 <find_volume+0x4aa>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	e00e      	b.n	8005f74 <find_volume+0x4c8>
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	085a      	lsrs	r2, r3, #1
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f84:	895b      	ldrh	r3, [r3, #10]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f90:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005f94:	8949      	ldrh	r1, [r1, #10]
 8005f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d201      	bcs.n	8005fa2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8005f9e:	230d      	movs	r3, #13
 8005fa0:	e0af      	b.n	8006102 <find_volume+0x656>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	6113      	str	r3, [r2, #16]
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fbe:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d17a      	bne.n	80060c8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	b21a      	sxth	r2, r3
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fe2:	b21b      	sxth	r3, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d16d      	bne.n	80060c8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fee:	3301      	adds	r3, #1
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ff4:	f7fe fc5a 	bl	80048ac <move_window>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d164      	bne.n	80060c8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006004:	2200      	movs	r2, #0
 8006006:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	b21a      	sxth	r2, r3
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006018:	b21b      	sxth	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b21b      	sxth	r3, r3
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <find_volume+0x660>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d151      	bne.n	80060c8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	78db      	ldrb	r3, [r3, #3]
 8006028:	061a      	lsls	r2, r3, #24
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	4313      	orrs	r3, r2
 8006032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006034:	7852      	ldrb	r2, [r2, #1]
 8006036:	0212      	lsls	r2, r2, #8
 8006038:	4313      	orrs	r3, r2
 800603a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603c:	7812      	ldrb	r2, [r2, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	4a33      	ldr	r2, [pc, #204]	; (8006110 <find_volume+0x664>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d140      	bne.n	80060c8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800604c:	061a      	lsls	r2, r3, #24
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	4313      	orrs	r3, r2
 8006058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800605e:	0212      	lsls	r2, r2, #8
 8006060:	4313      	orrs	r3, r2
 8006062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006064:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006068:	4313      	orrs	r3, r2
 800606a:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <find_volume+0x668>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d12b      	bne.n	80060c8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006076:	061a      	lsls	r2, r3, #24
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	4313      	orrs	r3, r2
 8006082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006084:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006088:	0212      	lsls	r2, r2, #8
 800608a:	4313      	orrs	r3, r2
 800608c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006092:	4313      	orrs	r3, r2
 8006094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800609a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80060a2:	061a      	lsls	r2, r3, #24
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	4313      	orrs	r3, r2
 80060ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80060b4:	0212      	lsls	r2, r2, #8
 80060b6:	4313      	orrs	r3, r2
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80060be:	4313      	orrs	r3, r2
 80060c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ce:	461a      	mov	r2, r3
 80060d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <find_volume+0x66c>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <find_volume+0x66c>)
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <find_volume+0x66c>)
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f4:	461a      	mov	r2, r3
 80060f6:	2300      	movs	r3, #0
 80060f8:	6153      	str	r3, [r2, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80060fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060fc:	f7fe fb5a 	bl	80047b4 <clear_lock>
#endif

	return FR_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3758      	adds	r7, #88	; 0x58
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	ffffaa55 	.word	0xffffaa55
 8006110:	41615252 	.word	0x41615252
 8006114:	61417272 	.word	0x61417272
 8006118:	200001d0 	.word	0x200001d0

0800611c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d02a      	beq.n	8006184 <validate+0x68>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d024      	beq.n	8006184 <validate+0x68>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <validate+0x68>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	88da      	ldrh	r2, [r3, #6]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006160:	889b      	ldrh	r3, [r3, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d10e      	bne.n	8006184 <validate+0x68>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe f969 	bl	800444c <disk_status>
 800617a:	4603      	mov	r3, r0
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006184:	2309      	movs	r3, #9
 8006186:	e000      	b.n	800618a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80061a6:	f107 0310 	add.w	r3, r7, #16
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fbcd 	bl	800594a <get_ldnumber>
 80061b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da01      	bge.n	80061bc <f_mount+0x28>
 80061b8:	230b      	movs	r3, #11
 80061ba:	e02f      	b.n	800621c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061bc:	4a19      	ldr	r2, [pc, #100]	; (8006224 <f_mount+0x90>)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80061cc:	69b8      	ldr	r0, [r7, #24]
 80061ce:	f7fe faf1 	bl	80047b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	490d      	ldr	r1, [pc, #52]	; (8006224 <f_mount+0x90>)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <f_mount+0x6e>
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d001      	beq.n	8006206 <f_mount+0x72>
 8006202:	2300      	movs	r3, #0
 8006204:	e00a      	b.n	800621c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006206:	f107 0108 	add.w	r1, r7, #8
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	2200      	movs	r2, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fc4b 	bl	8005aac <find_volume>
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200001cc 	.word	0x200001cc

08006228 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <f_opendir+0x14>
 8006238:	2309      	movs	r3, #9
 800623a:	e083      	b.n	8006344 <f_opendir+0x11c>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800623c:	4639      	mov	r1, r7
 800623e:	f107 0318 	add.w	r3, r7, #24
 8006242:	2200      	movs	r2, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fc31 	bl	8005aac <find_volume>
 800624a:	4603      	mov	r3, r0
 800624c:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d16d      	bne.n	8006330 <f_opendir+0x108>
		dp->fs = fs;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800625c:	6013      	str	r3, [r2, #0]
		INIT_BUF(*dp);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006264:	461a      	mov	r2, r3
 8006266:	f107 030c 	add.w	r3, r7, #12
 800626a:	6193      	str	r3, [r2, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff facd 	bl	8005810 <follow_path>
 8006276:	4603      	mov	r3, r0
 8006278:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d152      	bne.n	8006326 <f_opendir+0xfe>
			if (dp->dir) {						/* It is not the origin directory itself */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01a      	beq.n	80062c2 <f_opendir+0x9a>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	330b      	adds	r3, #11
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00e      	beq.n	80062be <f_opendir+0x96>
					dp->sclust = ld_clust(fs, dp->dir);
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7ff f862 	bl	8005376 <ld_clust>
 80062b2:	4602      	mov	r2, r0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	e001      	b.n	80062c2 <f_opendir+0x9a>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80062be:	2305      	movs	r3, #5
 80062c0:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d12e      	bne.n	8006326 <f_opendir+0xfe>
				dp->id = fs->id;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ce:	88da      	ldrh	r2, [r3, #6]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fe fe33 	bl	8004f46 <dir_sdi>
 80062e0:	4603      	mov	r3, r0
 80062e2:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 80062e4:	7ffb      	ldrb	r3, [r7, #31]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11d      	bne.n	8006326 <f_opendir+0xfe>
					if (dp->sclust) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d011      	beq.n	800631a <f_opendir+0xf2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80062f6:	2100      	movs	r1, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fe f99f 	bl	800463c <inc_lock>
 80062fe:	4602      	mov	r2, r0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006306:	61da      	str	r2, [r3, #28]
						if (!dp->lockid)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <f_opendir+0xfe>
							res = FR_TOO_MANY_OPEN_FILES;
 8006314:	2312      	movs	r3, #18
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e005      	b.n	8006326 <f_opendir+0xfe>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	61d3      	str	r3, [r2, #28]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	2b04      	cmp	r3, #4
 800632a:	d101      	bne.n	8006330 <f_opendir+0x108>
 800632c:	2305      	movs	r3, #5
 800632e:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8006330:	7ffb      	ldrb	r3, [r7, #31]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <f_opendir+0x11a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	6013      	str	r3, [r2, #0]

	LEAVE_FF(fs, res);
 8006342:	7ffb      	ldrb	r3, [r7, #31]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fee0 	bl	800611c <validate>
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d139      	bne.n	80063da <f_readdir+0x8e>
		if (!fno) {
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fe fde9 	bl	8004f46 <dir_sdi>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]
 8006378:	e02f      	b.n	80063da <f_readdir+0x8e>
		} else {
			INIT_BUF(*dp);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006380:	461a      	mov	r2, r3
 8006382:	f107 0308 	add.w	r3, r7, #8
 8006386:	6193      	str	r3, [r2, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8006388:	2100      	movs	r1, #0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff f874 	bl	8005478 <dir_read>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b04      	cmp	r3, #4
 8006398:	d107      	bne.n	80063aa <f_readdir+0x5e>
				dp->sect = 0;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6113      	str	r3, [r2, #16]
				res = FR_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d114      	bne.n	80063da <f_readdir+0x8e>
				get_fileinfo(dp, fno);		/* Get the object information */
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff f8c2 	bl	800553c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80063b8:	2100      	movs	r1, #0
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fe fe91 	bl	80050e2 <dir_next>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d107      	bne.n	80063da <f_readdir+0x8e>
					dp->sect = 0;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d0:	461a      	mov	r2, r3
 80063d2:	2300      	movs	r3, #0
 80063d4:	6113      	str	r3, [r2, #16]
					res = FR_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 80063fc:	7a5b      	ldrb	r3, [r3, #9]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d831      	bhi.n	8006468 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 8006406:	7a5b      	ldrb	r3, [r3, #9]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 800640e:	2100      	movs	r1, #0
 8006410:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 8006414:	7a5b      	ldrb	r3, [r3, #9]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	4a16      	ldr	r2, [pc, #88]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 8006424:	7a5b      	ldrb	r3, [r3, #9]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 800642c:	4413      	add	r3, r2
 800642e:	79fa      	ldrb	r2, [r7, #7]
 8006430:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 8006434:	7a5b      	ldrb	r3, [r3, #9]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	b2d1      	uxtb	r1, r2
 800643c:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <FATFS_LinkDriverEx+0x90>)
 800643e:	7251      	strb	r1, [r2, #9]
 8006440:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006442:	7dbb      	ldrb	r3, [r7, #22]
 8006444:	3330      	adds	r3, #48	; 0x30
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3301      	adds	r3, #1
 8006450:	223a      	movs	r2, #58	; 0x3a
 8006452:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3302      	adds	r3, #2
 8006458:	222f      	movs	r2, #47	; 0x2f
 800645a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3303      	adds	r3, #3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	200001ec 	.word	0x200001ec

08006478 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006482:	2200      	movs	r2, #0
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff ffac 	bl	80063e4 <FATFS_LinkDriverEx>
 800648c:	4603      	mov	r3, r0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <calloc>:
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <calloc+0xc>)
 800649a:	460a      	mov	r2, r1
 800649c:	4601      	mov	r1, r0
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	f000 b802 	b.w	80064a8 <_calloc_r>
 80064a4:	20000088 	.word	0x20000088

080064a8 <_calloc_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	fba1 5402 	umull	r5, r4, r1, r2
 80064ae:	b934      	cbnz	r4, 80064be <_calloc_r+0x16>
 80064b0:	4629      	mov	r1, r5
 80064b2:	f000 f82d 	bl	8006510 <_malloc_r>
 80064b6:	4606      	mov	r6, r0
 80064b8:	b928      	cbnz	r0, 80064c6 <_calloc_r+0x1e>
 80064ba:	4630      	mov	r0, r6
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	220c      	movs	r2, #12
 80064c0:	2600      	movs	r6, #0
 80064c2:	6002      	str	r2, [r0, #0]
 80064c4:	e7f9      	b.n	80064ba <_calloc_r+0x12>
 80064c6:	462a      	mov	r2, r5
 80064c8:	4621      	mov	r1, r4
 80064ca:	f000 f8cd 	bl	8006668 <memset>
 80064ce:	e7f4      	b.n	80064ba <_calloc_r+0x12>

080064d0 <sbrk_aligned>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4e0e      	ldr	r6, [pc, #56]	; (800650c <sbrk_aligned+0x3c>)
 80064d4:	460c      	mov	r4, r1
 80064d6:	6831      	ldr	r1, [r6, #0]
 80064d8:	4605      	mov	r5, r0
 80064da:	b911      	cbnz	r1, 80064e2 <sbrk_aligned+0x12>
 80064dc:	f000 f8cc 	bl	8006678 <_sbrk_r>
 80064e0:	6030      	str	r0, [r6, #0]
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f8c7 	bl	8006678 <_sbrk_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d00a      	beq.n	8006504 <sbrk_aligned+0x34>
 80064ee:	1cc4      	adds	r4, r0, #3
 80064f0:	f024 0403 	bic.w	r4, r4, #3
 80064f4:	42a0      	cmp	r0, r4
 80064f6:	d007      	beq.n	8006508 <sbrk_aligned+0x38>
 80064f8:	1a21      	subs	r1, r4, r0
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f8bc 	bl	8006678 <_sbrk_r>
 8006500:	3001      	adds	r0, #1
 8006502:	d101      	bne.n	8006508 <sbrk_aligned+0x38>
 8006504:	f04f 34ff 	mov.w	r4, #4294967295
 8006508:	4620      	mov	r0, r4
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	200001fc 	.word	0x200001fc

08006510 <_malloc_r>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	1ccd      	adds	r5, r1, #3
 8006516:	f025 0503 	bic.w	r5, r5, #3
 800651a:	3508      	adds	r5, #8
 800651c:	2d0c      	cmp	r5, #12
 800651e:	bf38      	it	cc
 8006520:	250c      	movcc	r5, #12
 8006522:	2d00      	cmp	r5, #0
 8006524:	4607      	mov	r7, r0
 8006526:	db01      	blt.n	800652c <_malloc_r+0x1c>
 8006528:	42a9      	cmp	r1, r5
 800652a:	d905      	bls.n	8006538 <_malloc_r+0x28>
 800652c:	230c      	movs	r3, #12
 800652e:	2600      	movs	r6, #0
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	4630      	mov	r0, r6
 8006534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800660c <_malloc_r+0xfc>
 800653c:	f000 f868 	bl	8006610 <__malloc_lock>
 8006540:	f8d8 3000 	ldr.w	r3, [r8]
 8006544:	461c      	mov	r4, r3
 8006546:	bb5c      	cbnz	r4, 80065a0 <_malloc_r+0x90>
 8006548:	4629      	mov	r1, r5
 800654a:	4638      	mov	r0, r7
 800654c:	f7ff ffc0 	bl	80064d0 <sbrk_aligned>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	4604      	mov	r4, r0
 8006554:	d155      	bne.n	8006602 <_malloc_r+0xf2>
 8006556:	f8d8 4000 	ldr.w	r4, [r8]
 800655a:	4626      	mov	r6, r4
 800655c:	2e00      	cmp	r6, #0
 800655e:	d145      	bne.n	80065ec <_malloc_r+0xdc>
 8006560:	2c00      	cmp	r4, #0
 8006562:	d048      	beq.n	80065f6 <_malloc_r+0xe6>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	4631      	mov	r1, r6
 8006568:	4638      	mov	r0, r7
 800656a:	eb04 0903 	add.w	r9, r4, r3
 800656e:	f000 f883 	bl	8006678 <_sbrk_r>
 8006572:	4581      	cmp	r9, r0
 8006574:	d13f      	bne.n	80065f6 <_malloc_r+0xe6>
 8006576:	6821      	ldr	r1, [r4, #0]
 8006578:	4638      	mov	r0, r7
 800657a:	1a6d      	subs	r5, r5, r1
 800657c:	4629      	mov	r1, r5
 800657e:	f7ff ffa7 	bl	80064d0 <sbrk_aligned>
 8006582:	3001      	adds	r0, #1
 8006584:	d037      	beq.n	80065f6 <_malloc_r+0xe6>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	442b      	add	r3, r5
 800658a:	6023      	str	r3, [r4, #0]
 800658c:	f8d8 3000 	ldr.w	r3, [r8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d038      	beq.n	8006606 <_malloc_r+0xf6>
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	42a2      	cmp	r2, r4
 8006598:	d12b      	bne.n	80065f2 <_malloc_r+0xe2>
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	e00f      	b.n	80065c0 <_malloc_r+0xb0>
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	1b52      	subs	r2, r2, r5
 80065a4:	d41f      	bmi.n	80065e6 <_malloc_r+0xd6>
 80065a6:	2a0b      	cmp	r2, #11
 80065a8:	d917      	bls.n	80065da <_malloc_r+0xca>
 80065aa:	1961      	adds	r1, r4, r5
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	6025      	str	r5, [r4, #0]
 80065b0:	bf18      	it	ne
 80065b2:	6059      	strne	r1, [r3, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	bf08      	it	eq
 80065b8:	f8c8 1000 	streq.w	r1, [r8]
 80065bc:	5162      	str	r2, [r4, r5]
 80065be:	604b      	str	r3, [r1, #4]
 80065c0:	4638      	mov	r0, r7
 80065c2:	f104 060b 	add.w	r6, r4, #11
 80065c6:	f000 f829 	bl	800661c <__malloc_unlock>
 80065ca:	f026 0607 	bic.w	r6, r6, #7
 80065ce:	1d23      	adds	r3, r4, #4
 80065d0:	1af2      	subs	r2, r6, r3
 80065d2:	d0ae      	beq.n	8006532 <_malloc_r+0x22>
 80065d4:	1b9b      	subs	r3, r3, r6
 80065d6:	50a3      	str	r3, [r4, r2]
 80065d8:	e7ab      	b.n	8006532 <_malloc_r+0x22>
 80065da:	42a3      	cmp	r3, r4
 80065dc:	6862      	ldr	r2, [r4, #4]
 80065de:	d1dd      	bne.n	800659c <_malloc_r+0x8c>
 80065e0:	f8c8 2000 	str.w	r2, [r8]
 80065e4:	e7ec      	b.n	80065c0 <_malloc_r+0xb0>
 80065e6:	4623      	mov	r3, r4
 80065e8:	6864      	ldr	r4, [r4, #4]
 80065ea:	e7ac      	b.n	8006546 <_malloc_r+0x36>
 80065ec:	4634      	mov	r4, r6
 80065ee:	6876      	ldr	r6, [r6, #4]
 80065f0:	e7b4      	b.n	800655c <_malloc_r+0x4c>
 80065f2:	4613      	mov	r3, r2
 80065f4:	e7cc      	b.n	8006590 <_malloc_r+0x80>
 80065f6:	230c      	movs	r3, #12
 80065f8:	4638      	mov	r0, r7
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	f000 f80e 	bl	800661c <__malloc_unlock>
 8006600:	e797      	b.n	8006532 <_malloc_r+0x22>
 8006602:	6025      	str	r5, [r4, #0]
 8006604:	e7dc      	b.n	80065c0 <_malloc_r+0xb0>
 8006606:	605b      	str	r3, [r3, #4]
 8006608:	deff      	udf	#255	; 0xff
 800660a:	bf00      	nop
 800660c:	200001f8 	.word	0x200001f8

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_lock+0x8>)
 8006612:	f000 b86b 	b.w	80066ec <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	2000033c 	.word	0x2000033c

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_unlock+0x8>)
 800661e:	f000 b866 	b.w	80066ee <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	2000033c 	.word	0x2000033c

08006628 <siprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800662e:	b500      	push	{lr}
 8006630:	b09c      	sub	sp, #112	; 0x70
 8006632:	ab1d      	add	r3, sp, #116	; 0x74
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	9006      	str	r0, [sp, #24]
 8006638:	9107      	str	r1, [sp, #28]
 800663a:	9104      	str	r1, [sp, #16]
 800663c:	4808      	ldr	r0, [pc, #32]	; (8006660 <siprintf+0x38>)
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <siprintf+0x3c>)
 8006640:	f853 2b04 	ldr.w	r2, [r3], #4
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	a902      	add	r1, sp, #8
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	f000 f8fa 	bl	8006844 <_svfiprintf_r>
 8006650:	2200      	movs	r2, #0
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	b01c      	add	sp, #112	; 0x70
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b003      	add	sp, #12
 800665e:	4770      	bx	lr
 8006660:	20000088 	.word	0x20000088
 8006664:	ffff0208 	.word	0xffff0208

08006668 <memset>:
 8006668:	4603      	mov	r3, r0
 800666a:	4402      	add	r2, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	f803 1b01 	strb.w	r1, [r3], #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <_sbrk_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	2300      	movs	r3, #0
 800667c:	4d05      	ldr	r5, [pc, #20]	; (8006694 <_sbrk_r+0x1c>)
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fb fac4 	bl	8001c10 <_sbrk>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_sbrk_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_sbrk_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20000338 	.word	0x20000338

08006698 <__errno>:
 8006698:	4b01      	ldr	r3, [pc, #4]	; (80066a0 <__errno+0x8>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000088 	.word	0x20000088

080066a4 <__libc_init_array>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	2600      	movs	r6, #0
 80066a8:	4d0c      	ldr	r5, [pc, #48]	; (80066dc <__libc_init_array+0x38>)
 80066aa:	4c0d      	ldr	r4, [pc, #52]	; (80066e0 <__libc_init_array+0x3c>)
 80066ac:	1b64      	subs	r4, r4, r5
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	42a6      	cmp	r6, r4
 80066b2:	d109      	bne.n	80066c8 <__libc_init_array+0x24>
 80066b4:	f000 fbc6 	bl	8006e44 <_init>
 80066b8:	2600      	movs	r6, #0
 80066ba:	4d0a      	ldr	r5, [pc, #40]	; (80066e4 <__libc_init_array+0x40>)
 80066bc:	4c0a      	ldr	r4, [pc, #40]	; (80066e8 <__libc_init_array+0x44>)
 80066be:	1b64      	subs	r4, r4, r5
 80066c0:	10a4      	asrs	r4, r4, #2
 80066c2:	42a6      	cmp	r6, r4
 80066c4:	d105      	bne.n	80066d2 <__libc_init_array+0x2e>
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
 80066c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066cc:	4798      	blx	r3
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7ee      	b.n	80066b0 <__libc_init_array+0xc>
 80066d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d6:	4798      	blx	r3
 80066d8:	3601      	adds	r6, #1
 80066da:	e7f2      	b.n	80066c2 <__libc_init_array+0x1e>
 80066dc:	08007e3c 	.word	0x08007e3c
 80066e0:	08007e3c 	.word	0x08007e3c
 80066e4:	08007e3c 	.word	0x08007e3c
 80066e8:	08007e40 	.word	0x08007e40

080066ec <__retarget_lock_acquire_recursive>:
 80066ec:	4770      	bx	lr

080066ee <__retarget_lock_release_recursive>:
 80066ee:	4770      	bx	lr

080066f0 <strcpy>:
 80066f0:	4603      	mov	r3, r0
 80066f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f6:	f803 2b01 	strb.w	r2, [r3], #1
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	d1f9      	bne.n	80066f2 <strcpy+0x2>
 80066fe:	4770      	bx	lr

08006700 <_free_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4605      	mov	r5, r0
 8006704:	2900      	cmp	r1, #0
 8006706:	d040      	beq.n	800678a <_free_r+0x8a>
 8006708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670c:	1f0c      	subs	r4, r1, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	bfb8      	it	lt
 8006712:	18e4      	addlt	r4, r4, r3
 8006714:	f7ff ff7c 	bl	8006610 <__malloc_lock>
 8006718:	4a1c      	ldr	r2, [pc, #112]	; (800678c <_free_r+0x8c>)
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	b933      	cbnz	r3, 800672c <_free_r+0x2c>
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	6014      	str	r4, [r2, #0]
 8006722:	4628      	mov	r0, r5
 8006724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006728:	f7ff bf78 	b.w	800661c <__malloc_unlock>
 800672c:	42a3      	cmp	r3, r4
 800672e:	d908      	bls.n	8006742 <_free_r+0x42>
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	1821      	adds	r1, r4, r0
 8006734:	428b      	cmp	r3, r1
 8006736:	bf01      	itttt	eq
 8006738:	6819      	ldreq	r1, [r3, #0]
 800673a:	685b      	ldreq	r3, [r3, #4]
 800673c:	1809      	addeq	r1, r1, r0
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	e7ed      	b.n	800671e <_free_r+0x1e>
 8006742:	461a      	mov	r2, r3
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b10b      	cbz	r3, 800674c <_free_r+0x4c>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d9fa      	bls.n	8006742 <_free_r+0x42>
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	1850      	adds	r0, r2, r1
 8006750:	42a0      	cmp	r0, r4
 8006752:	d10b      	bne.n	800676c <_free_r+0x6c>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	4401      	add	r1, r0
 8006758:	1850      	adds	r0, r2, r1
 800675a:	4283      	cmp	r3, r0
 800675c:	6011      	str	r1, [r2, #0]
 800675e:	d1e0      	bne.n	8006722 <_free_r+0x22>
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4408      	add	r0, r1
 8006766:	6010      	str	r0, [r2, #0]
 8006768:	6053      	str	r3, [r2, #4]
 800676a:	e7da      	b.n	8006722 <_free_r+0x22>
 800676c:	d902      	bls.n	8006774 <_free_r+0x74>
 800676e:	230c      	movs	r3, #12
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	e7d6      	b.n	8006722 <_free_r+0x22>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	1821      	adds	r1, r4, r0
 8006778:	428b      	cmp	r3, r1
 800677a:	bf01      	itttt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	1809      	addeq	r1, r1, r0
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	6054      	str	r4, [r2, #4]
 8006788:	e7cb      	b.n	8006722 <_free_r+0x22>
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	200001f8 	.word	0x200001f8

08006790 <__ssputs_r>:
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	461f      	mov	r7, r3
 8006796:	688e      	ldr	r6, [r1, #8]
 8006798:	4682      	mov	sl, r0
 800679a:	42be      	cmp	r6, r7
 800679c:	460c      	mov	r4, r1
 800679e:	4690      	mov	r8, r2
 80067a0:	680b      	ldr	r3, [r1, #0]
 80067a2:	d82c      	bhi.n	80067fe <__ssputs_r+0x6e>
 80067a4:	898a      	ldrh	r2, [r1, #12]
 80067a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067aa:	d026      	beq.n	80067fa <__ssputs_r+0x6a>
 80067ac:	6965      	ldr	r5, [r4, #20]
 80067ae:	6909      	ldr	r1, [r1, #16]
 80067b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067b4:	eba3 0901 	sub.w	r9, r3, r1
 80067b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067bc:	1c7b      	adds	r3, r7, #1
 80067be:	444b      	add	r3, r9
 80067c0:	106d      	asrs	r5, r5, #1
 80067c2:	429d      	cmp	r5, r3
 80067c4:	bf38      	it	cc
 80067c6:	461d      	movcc	r5, r3
 80067c8:	0553      	lsls	r3, r2, #21
 80067ca:	d527      	bpl.n	800681c <__ssputs_r+0x8c>
 80067cc:	4629      	mov	r1, r5
 80067ce:	f7ff fe9f 	bl	8006510 <_malloc_r>
 80067d2:	4606      	mov	r6, r0
 80067d4:	b360      	cbz	r0, 8006830 <__ssputs_r+0xa0>
 80067d6:	464a      	mov	r2, r9
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	f000 faed 	bl	8006db8 <memcpy>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	6126      	str	r6, [r4, #16]
 80067ec:	444e      	add	r6, r9
 80067ee:	6026      	str	r6, [r4, #0]
 80067f0:	463e      	mov	r6, r7
 80067f2:	6165      	str	r5, [r4, #20]
 80067f4:	eba5 0509 	sub.w	r5, r5, r9
 80067f8:	60a5      	str	r5, [r4, #8]
 80067fa:	42be      	cmp	r6, r7
 80067fc:	d900      	bls.n	8006800 <__ssputs_r+0x70>
 80067fe:	463e      	mov	r6, r7
 8006800:	4632      	mov	r2, r6
 8006802:	4641      	mov	r1, r8
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	f000 faaf 	bl	8006d68 <memmove>
 800680a:	2000      	movs	r0, #0
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	1b9b      	subs	r3, r3, r6
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	4433      	add	r3, r6
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	462a      	mov	r2, r5
 800681e:	f000 fad9 	bl	8006dd4 <_realloc_r>
 8006822:	4606      	mov	r6, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	d1e0      	bne.n	80067ea <__ssputs_r+0x5a>
 8006828:	4650      	mov	r0, sl
 800682a:	6921      	ldr	r1, [r4, #16]
 800682c:	f7ff ff68 	bl	8006700 <_free_r>
 8006830:	230c      	movs	r3, #12
 8006832:	f8ca 3000 	str.w	r3, [sl]
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	e7e9      	b.n	8006818 <__ssputs_r+0x88>

08006844 <_svfiprintf_r>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	4698      	mov	r8, r3
 800684a:	898b      	ldrh	r3, [r1, #12]
 800684c:	4607      	mov	r7, r0
 800684e:	061b      	lsls	r3, r3, #24
 8006850:	460d      	mov	r5, r1
 8006852:	4614      	mov	r4, r2
 8006854:	b09d      	sub	sp, #116	; 0x74
 8006856:	d50e      	bpl.n	8006876 <_svfiprintf_r+0x32>
 8006858:	690b      	ldr	r3, [r1, #16]
 800685a:	b963      	cbnz	r3, 8006876 <_svfiprintf_r+0x32>
 800685c:	2140      	movs	r1, #64	; 0x40
 800685e:	f7ff fe57 	bl	8006510 <_malloc_r>
 8006862:	6028      	str	r0, [r5, #0]
 8006864:	6128      	str	r0, [r5, #16]
 8006866:	b920      	cbnz	r0, 8006872 <_svfiprintf_r+0x2e>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	e0d0      	b.n	8006a14 <_svfiprintf_r+0x1d0>
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	616b      	str	r3, [r5, #20]
 8006876:	2300      	movs	r3, #0
 8006878:	9309      	str	r3, [sp, #36]	; 0x24
 800687a:	2320      	movs	r3, #32
 800687c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	f04f 0901 	mov.w	r9, #1
 8006886:	f8cd 800c 	str.w	r8, [sp, #12]
 800688a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006a2c <_svfiprintf_r+0x1e8>
 800688e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006892:	4623      	mov	r3, r4
 8006894:	469a      	mov	sl, r3
 8006896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689a:	b10a      	cbz	r2, 80068a0 <_svfiprintf_r+0x5c>
 800689c:	2a25      	cmp	r2, #37	; 0x25
 800689e:	d1f9      	bne.n	8006894 <_svfiprintf_r+0x50>
 80068a0:	ebba 0b04 	subs.w	fp, sl, r4
 80068a4:	d00b      	beq.n	80068be <_svfiprintf_r+0x7a>
 80068a6:	465b      	mov	r3, fp
 80068a8:	4622      	mov	r2, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	4638      	mov	r0, r7
 80068ae:	f7ff ff6f 	bl	8006790 <__ssputs_r>
 80068b2:	3001      	adds	r0, #1
 80068b4:	f000 80a9 	beq.w	8006a0a <_svfiprintf_r+0x1c6>
 80068b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ba:	445a      	add	r2, fp
 80068bc:	9209      	str	r2, [sp, #36]	; 0x24
 80068be:	f89a 3000 	ldrb.w	r3, [sl]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80a1 	beq.w	8006a0a <_svfiprintf_r+0x1c6>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d2:	f10a 0a01 	add.w	sl, sl, #1
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068de:	931a      	str	r3, [sp, #104]	; 0x68
 80068e0:	4654      	mov	r4, sl
 80068e2:	2205      	movs	r2, #5
 80068e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e8:	4850      	ldr	r0, [pc, #320]	; (8006a2c <_svfiprintf_r+0x1e8>)
 80068ea:	f000 fa57 	bl	8006d9c <memchr>
 80068ee:	9a04      	ldr	r2, [sp, #16]
 80068f0:	b9d8      	cbnz	r0, 800692a <_svfiprintf_r+0xe6>
 80068f2:	06d0      	lsls	r0, r2, #27
 80068f4:	bf44      	itt	mi
 80068f6:	2320      	movmi	r3, #32
 80068f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fc:	0711      	lsls	r1, r2, #28
 80068fe:	bf44      	itt	mi
 8006900:	232b      	movmi	r3, #43	; 0x2b
 8006902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b2a      	cmp	r3, #42	; 0x2a
 800690c:	d015      	beq.n	800693a <_svfiprintf_r+0xf6>
 800690e:	4654      	mov	r4, sl
 8006910:	2000      	movs	r0, #0
 8006912:	f04f 0c0a 	mov.w	ip, #10
 8006916:	9a07      	ldr	r2, [sp, #28]
 8006918:	4621      	mov	r1, r4
 800691a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800691e:	3b30      	subs	r3, #48	; 0x30
 8006920:	2b09      	cmp	r3, #9
 8006922:	d94d      	bls.n	80069c0 <_svfiprintf_r+0x17c>
 8006924:	b1b0      	cbz	r0, 8006954 <_svfiprintf_r+0x110>
 8006926:	9207      	str	r2, [sp, #28]
 8006928:	e014      	b.n	8006954 <_svfiprintf_r+0x110>
 800692a:	eba0 0308 	sub.w	r3, r0, r8
 800692e:	fa09 f303 	lsl.w	r3, r9, r3
 8006932:	4313      	orrs	r3, r2
 8006934:	46a2      	mov	sl, r4
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	e7d2      	b.n	80068e0 <_svfiprintf_r+0x9c>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	1d19      	adds	r1, r3, #4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	9103      	str	r1, [sp, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfbb      	ittet	lt
 8006946:	425b      	neglt	r3, r3
 8006948:	f042 0202 	orrlt.w	r2, r2, #2
 800694c:	9307      	strge	r3, [sp, #28]
 800694e:	9307      	strlt	r3, [sp, #28]
 8006950:	bfb8      	it	lt
 8006952:	9204      	strlt	r2, [sp, #16]
 8006954:	7823      	ldrb	r3, [r4, #0]
 8006956:	2b2e      	cmp	r3, #46	; 0x2e
 8006958:	d10c      	bne.n	8006974 <_svfiprintf_r+0x130>
 800695a:	7863      	ldrb	r3, [r4, #1]
 800695c:	2b2a      	cmp	r3, #42	; 0x2a
 800695e:	d134      	bne.n	80069ca <_svfiprintf_r+0x186>
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	3402      	adds	r4, #2
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	9203      	str	r2, [sp, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfb8      	it	lt
 800696e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006a30 <_svfiprintf_r+0x1ec>
 8006978:	2203      	movs	r2, #3
 800697a:	4650      	mov	r0, sl
 800697c:	7821      	ldrb	r1, [r4, #0]
 800697e:	f000 fa0d 	bl	8006d9c <memchr>
 8006982:	b138      	cbz	r0, 8006994 <_svfiprintf_r+0x150>
 8006984:	2240      	movs	r2, #64	; 0x40
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	eba0 000a 	sub.w	r0, r0, sl
 800698c:	4082      	lsls	r2, r0
 800698e:	4313      	orrs	r3, r2
 8006990:	3401      	adds	r4, #1
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006998:	2206      	movs	r2, #6
 800699a:	4826      	ldr	r0, [pc, #152]	; (8006a34 <_svfiprintf_r+0x1f0>)
 800699c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a0:	f000 f9fc 	bl	8006d9c <memchr>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d038      	beq.n	8006a1a <_svfiprintf_r+0x1d6>
 80069a8:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <_svfiprintf_r+0x1f4>)
 80069aa:	bb1b      	cbnz	r3, 80069f4 <_svfiprintf_r+0x1b0>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	3307      	adds	r3, #7
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	3308      	adds	r3, #8
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	4433      	add	r3, r6
 80069bc:	9309      	str	r3, [sp, #36]	; 0x24
 80069be:	e768      	b.n	8006892 <_svfiprintf_r+0x4e>
 80069c0:	460c      	mov	r4, r1
 80069c2:	2001      	movs	r0, #1
 80069c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c8:	e7a6      	b.n	8006918 <_svfiprintf_r+0xd4>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f04f 0c0a 	mov.w	ip, #10
 80069d0:	4619      	mov	r1, r3
 80069d2:	3401      	adds	r4, #1
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	4620      	mov	r0, r4
 80069d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069dc:	3a30      	subs	r2, #48	; 0x30
 80069de:	2a09      	cmp	r2, #9
 80069e0:	d903      	bls.n	80069ea <_svfiprintf_r+0x1a6>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0c6      	beq.n	8006974 <_svfiprintf_r+0x130>
 80069e6:	9105      	str	r1, [sp, #20]
 80069e8:	e7c4      	b.n	8006974 <_svfiprintf_r+0x130>
 80069ea:	4604      	mov	r4, r0
 80069ec:	2301      	movs	r3, #1
 80069ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f2:	e7f0      	b.n	80069d6 <_svfiprintf_r+0x192>
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4638      	mov	r0, r7
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <_svfiprintf_r+0x1f8>)
 80069fe:	a904      	add	r1, sp, #16
 8006a00:	f3af 8000 	nop.w
 8006a04:	1c42      	adds	r2, r0, #1
 8006a06:	4606      	mov	r6, r0
 8006a08:	d1d6      	bne.n	80069b8 <_svfiprintf_r+0x174>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	065b      	lsls	r3, r3, #25
 8006a0e:	f53f af2d 	bmi.w	800686c <_svfiprintf_r+0x28>
 8006a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a14:	b01d      	add	sp, #116	; 0x74
 8006a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4638      	mov	r0, r7
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <_svfiprintf_r+0x1f8>)
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	f000 f87d 	bl	8006b24 <_printf_i>
 8006a2a:	e7eb      	b.n	8006a04 <_svfiprintf_r+0x1c0>
 8006a2c:	08007e08 	.word	0x08007e08
 8006a30:	08007e0e 	.word	0x08007e0e
 8006a34:	08007e12 	.word	0x08007e12
 8006a38:	00000000 	.word	0x00000000
 8006a3c:	08006791 	.word	0x08006791

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4699      	mov	r9, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	bfb8      	it	lt
 8006a52:	4613      	movlt	r3, r2
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc2b      	bgt.n	8006ae0 <_printf_common+0xa0>
 8006a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a8c:	1e13      	subs	r3, r2, #0
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d430      	bmi.n	8006afa <_printf_common+0xba>
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d023      	beq.n	8006aee <_printf_common+0xae>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf14      	ite	ne
 8006ab2:	2500      	movne	r5, #0
 8006ab4:	6833      	ldreq	r3, [r6, #0]
 8006ab6:	f04f 0600 	mov.w	r6, #0
 8006aba:	bf08      	it	eq
 8006abc:	68e5      	ldreq	r5, [r4, #12]
 8006abe:	f104 041a 	add.w	r4, r4, #26
 8006ac2:	bf08      	it	eq
 8006ac4:	1aed      	subeq	r5, r5, r3
 8006ac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006aca:	bf08      	it	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bfc4      	itt	gt
 8006ad4:	1a9b      	subgt	r3, r3, r2
 8006ad6:	18ed      	addgt	r5, r5, r3
 8006ad8:	42b5      	cmp	r5, r6
 8006ada:	d11a      	bne.n	8006b12 <_printf_common+0xd2>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e008      	b.n	8006af2 <_printf_common+0xb2>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	47c0      	blx	r8
 8006aea:	3001      	adds	r0, #1
 8006aec:	d103      	bne.n	8006af6 <_printf_common+0xb6>
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	3501      	adds	r5, #1
 8006af8:	e7c1      	b.n	8006a7e <_printf_common+0x3e>
 8006afa:	2030      	movs	r0, #48	; 0x30
 8006afc:	18e1      	adds	r1, r4, r3
 8006afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b08:	4422      	add	r2, r4
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b10:	e7c2      	b.n	8006a98 <_printf_common+0x58>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4622      	mov	r2, r4
 8006b16:	4649      	mov	r1, r9
 8006b18:	4638      	mov	r0, r7
 8006b1a:	47c0      	blx	r8
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0e6      	beq.n	8006aee <_printf_common+0xae>
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7d9      	b.n	8006ad8 <_printf_common+0x98>

08006b24 <_printf_i>:
 8006b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	7e0f      	ldrb	r7, [r1, #24]
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	2f78      	cmp	r7, #120	; 0x78
 8006b2e:	4680      	mov	r8, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	469a      	mov	sl, r3
 8006b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b3a:	d807      	bhi.n	8006b4c <_printf_i+0x28>
 8006b3c:	2f62      	cmp	r7, #98	; 0x62
 8006b3e:	d80a      	bhi.n	8006b56 <_printf_i+0x32>
 8006b40:	2f00      	cmp	r7, #0
 8006b42:	f000 80d5 	beq.w	8006cf0 <_printf_i+0x1cc>
 8006b46:	2f58      	cmp	r7, #88	; 0x58
 8006b48:	f000 80c1 	beq.w	8006cce <_printf_i+0x1aa>
 8006b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b54:	e03a      	b.n	8006bcc <_printf_i+0xa8>
 8006b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b5a:	2b15      	cmp	r3, #21
 8006b5c:	d8f6      	bhi.n	8006b4c <_printf_i+0x28>
 8006b5e:	a101      	add	r1, pc, #4	; (adr r1, 8006b64 <_printf_i+0x40>)
 8006b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b64:	08006bbd 	.word	0x08006bbd
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006b4d 	.word	0x08006b4d
 8006b70:	08006b4d 	.word	0x08006b4d
 8006b74:	08006b4d 	.word	0x08006b4d
 8006b78:	08006b4d 	.word	0x08006b4d
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006b4d 	.word	0x08006b4d
 8006b84:	08006b4d 	.word	0x08006b4d
 8006b88:	08006b4d 	.word	0x08006b4d
 8006b8c:	08006b4d 	.word	0x08006b4d
 8006b90:	08006cd7 	.word	0x08006cd7
 8006b94:	08006bfd 	.word	0x08006bfd
 8006b98:	08006c91 	.word	0x08006c91
 8006b9c:	08006b4d 	.word	0x08006b4d
 8006ba0:	08006b4d 	.word	0x08006b4d
 8006ba4:	08006cf9 	.word	0x08006cf9
 8006ba8:	08006b4d 	.word	0x08006b4d
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	08006b4d 	.word	0x08006b4d
 8006bb4:	08006b4d 	.word	0x08006b4d
 8006bb8:	08006c99 	.word	0x08006c99
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	1d1a      	adds	r2, r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	602a      	str	r2, [r5, #0]
 8006bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0a0      	b.n	8006d12 <_printf_i+0x1ee>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	0607      	lsls	r7, r0, #24
 8006bd6:	f103 0104 	add.w	r1, r3, #4
 8006bda:	6029      	str	r1, [r5, #0]
 8006bdc:	d501      	bpl.n	8006be2 <_printf_i+0xbe>
 8006bde:	681e      	ldr	r6, [r3, #0]
 8006be0:	e003      	b.n	8006bea <_printf_i+0xc6>
 8006be2:	0646      	lsls	r6, r0, #25
 8006be4:	d5fb      	bpl.n	8006bde <_printf_i+0xba>
 8006be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	da03      	bge.n	8006bf6 <_printf_i+0xd2>
 8006bee:	232d      	movs	r3, #45	; 0x2d
 8006bf0:	4276      	negs	r6, r6
 8006bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	4859      	ldr	r0, [pc, #356]	; (8006d60 <_printf_i+0x23c>)
 8006bfa:	e012      	b.n	8006c22 <_printf_i+0xfe>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	1d19      	adds	r1, r3, #4
 8006c02:	6029      	str	r1, [r5, #0]
 8006c04:	0605      	lsls	r5, r0, #24
 8006c06:	d501      	bpl.n	8006c0c <_printf_i+0xe8>
 8006c08:	681e      	ldr	r6, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <_printf_i+0xee>
 8006c0c:	0641      	lsls	r1, r0, #25
 8006c0e:	d5fb      	bpl.n	8006c08 <_printf_i+0xe4>
 8006c10:	881e      	ldrh	r6, [r3, #0]
 8006c12:	2f6f      	cmp	r7, #111	; 0x6f
 8006c14:	bf0c      	ite	eq
 8006c16:	2308      	moveq	r3, #8
 8006c18:	230a      	movne	r3, #10
 8006c1a:	4851      	ldr	r0, [pc, #324]	; (8006d60 <_printf_i+0x23c>)
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c22:	6865      	ldr	r5, [r4, #4]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	bfa8      	it	ge
 8006c28:	6821      	ldrge	r1, [r4, #0]
 8006c2a:	60a5      	str	r5, [r4, #8]
 8006c2c:	bfa4      	itt	ge
 8006c2e:	f021 0104 	bicge.w	r1, r1, #4
 8006c32:	6021      	strge	r1, [r4, #0]
 8006c34:	b90e      	cbnz	r6, 8006c3a <_printf_i+0x116>
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	d04b      	beq.n	8006cd2 <_printf_i+0x1ae>
 8006c3a:	4615      	mov	r5, r2
 8006c3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c40:	fb03 6711 	mls	r7, r3, r1, r6
 8006c44:	5dc7      	ldrb	r7, [r0, r7]
 8006c46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c4a:	4637      	mov	r7, r6
 8006c4c:	42bb      	cmp	r3, r7
 8006c4e:	460e      	mov	r6, r1
 8006c50:	d9f4      	bls.n	8006c3c <_printf_i+0x118>
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d10b      	bne.n	8006c6e <_printf_i+0x14a>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	07de      	lsls	r6, r3, #31
 8006c5a:	d508      	bpl.n	8006c6e <_printf_i+0x14a>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	6861      	ldr	r1, [r4, #4]
 8006c60:	4299      	cmp	r1, r3
 8006c62:	bfde      	ittt	le
 8006c64:	2330      	movle	r3, #48	; 0x30
 8006c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c6e:	1b52      	subs	r2, r2, r5
 8006c70:	6122      	str	r2, [r4, #16]
 8006c72:	464b      	mov	r3, r9
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f8cd a000 	str.w	sl, [sp]
 8006c7c:	aa03      	add	r2, sp, #12
 8006c7e:	f7ff fedf 	bl	8006a40 <_printf_common>
 8006c82:	3001      	adds	r0, #1
 8006c84:	d14a      	bne.n	8006d1c <_printf_i+0x1f8>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	b004      	add	sp, #16
 8006c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	2778      	movs	r7, #120	; 0x78
 8006c9a:	4832      	ldr	r0, [pc, #200]	; (8006d64 <_printf_i+0x240>)
 8006c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	6829      	ldr	r1, [r5, #0]
 8006ca4:	061f      	lsls	r7, r3, #24
 8006ca6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006caa:	d402      	bmi.n	8006cb2 <_printf_i+0x18e>
 8006cac:	065f      	lsls	r7, r3, #25
 8006cae:	bf48      	it	mi
 8006cb0:	b2b6      	uxthmi	r6, r6
 8006cb2:	07df      	lsls	r7, r3, #31
 8006cb4:	bf48      	it	mi
 8006cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cba:	6029      	str	r1, [r5, #0]
 8006cbc:	bf48      	it	mi
 8006cbe:	6023      	strmi	r3, [r4, #0]
 8006cc0:	b91e      	cbnz	r6, 8006cca <_printf_i+0x1a6>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f023 0320 	bic.w	r3, r3, #32
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	2310      	movs	r3, #16
 8006ccc:	e7a6      	b.n	8006c1c <_printf_i+0xf8>
 8006cce:	4824      	ldr	r0, [pc, #144]	; (8006d60 <_printf_i+0x23c>)
 8006cd0:	e7e4      	b.n	8006c9c <_printf_i+0x178>
 8006cd2:	4615      	mov	r5, r2
 8006cd4:	e7bd      	b.n	8006c52 <_printf_i+0x12e>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	6826      	ldr	r6, [r4, #0]
 8006cda:	1d18      	adds	r0, r3, #4
 8006cdc:	6961      	ldr	r1, [r4, #20]
 8006cde:	6028      	str	r0, [r5, #0]
 8006ce0:	0635      	lsls	r5, r6, #24
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	d501      	bpl.n	8006cea <_printf_i+0x1c6>
 8006ce6:	6019      	str	r1, [r3, #0]
 8006ce8:	e002      	b.n	8006cf0 <_printf_i+0x1cc>
 8006cea:	0670      	lsls	r0, r6, #25
 8006cec:	d5fb      	bpl.n	8006ce6 <_printf_i+0x1c2>
 8006cee:	8019      	strh	r1, [r3, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4615      	mov	r5, r2
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	e7bc      	b.n	8006c72 <_printf_i+0x14e>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	602a      	str	r2, [r5, #0]
 8006d00:	681d      	ldr	r5, [r3, #0]
 8006d02:	6862      	ldr	r2, [r4, #4]
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f849 	bl	8006d9c <memchr>
 8006d0a:	b108      	cbz	r0, 8006d10 <_printf_i+0x1ec>
 8006d0c:	1b40      	subs	r0, r0, r5
 8006d0e:	6060      	str	r0, [r4, #4]
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	2300      	movs	r3, #0
 8006d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1a:	e7aa      	b.n	8006c72 <_printf_i+0x14e>
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	47d0      	blx	sl
 8006d26:	3001      	adds	r0, #1
 8006d28:	d0ad      	beq.n	8006c86 <_printf_i+0x162>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	079b      	lsls	r3, r3, #30
 8006d2e:	d413      	bmi.n	8006d58 <_printf_i+0x234>
 8006d30:	68e0      	ldr	r0, [r4, #12]
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	4298      	cmp	r0, r3
 8006d36:	bfb8      	it	lt
 8006d38:	4618      	movlt	r0, r3
 8006d3a:	e7a6      	b.n	8006c8a <_printf_i+0x166>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4632      	mov	r2, r6
 8006d40:	4649      	mov	r1, r9
 8006d42:	4640      	mov	r0, r8
 8006d44:	47d0      	blx	sl
 8006d46:	3001      	adds	r0, #1
 8006d48:	d09d      	beq.n	8006c86 <_printf_i+0x162>
 8006d4a:	3501      	adds	r5, #1
 8006d4c:	68e3      	ldr	r3, [r4, #12]
 8006d4e:	9903      	ldr	r1, [sp, #12]
 8006d50:	1a5b      	subs	r3, r3, r1
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	dcf2      	bgt.n	8006d3c <_printf_i+0x218>
 8006d56:	e7eb      	b.n	8006d30 <_printf_i+0x20c>
 8006d58:	2500      	movs	r5, #0
 8006d5a:	f104 0619 	add.w	r6, r4, #25
 8006d5e:	e7f5      	b.n	8006d4c <_printf_i+0x228>
 8006d60:	08007e19 	.word	0x08007e19
 8006d64:	08007e2a 	.word	0x08007e2a

08006d68 <memmove>:
 8006d68:	4288      	cmp	r0, r1
 8006d6a:	b510      	push	{r4, lr}
 8006d6c:	eb01 0402 	add.w	r4, r1, r2
 8006d70:	d902      	bls.n	8006d78 <memmove+0x10>
 8006d72:	4284      	cmp	r4, r0
 8006d74:	4623      	mov	r3, r4
 8006d76:	d807      	bhi.n	8006d88 <memmove+0x20>
 8006d78:	1e43      	subs	r3, r0, #1
 8006d7a:	42a1      	cmp	r1, r4
 8006d7c:	d008      	beq.n	8006d90 <memmove+0x28>
 8006d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d86:	e7f8      	b.n	8006d7a <memmove+0x12>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4402      	add	r2, r0
 8006d8c:	428a      	cmp	r2, r1
 8006d8e:	d100      	bne.n	8006d92 <memmove+0x2a>
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d9a:	e7f7      	b.n	8006d8c <memmove+0x24>

08006d9c <memchr>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	b2c9      	uxtb	r1, r1
 8006da2:	4402      	add	r2, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	d101      	bne.n	8006dae <memchr+0x12>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e003      	b.n	8006db6 <memchr+0x1a>
 8006dae:	7804      	ldrb	r4, [r0, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	428c      	cmp	r4, r1
 8006db4:	d1f6      	bne.n	8006da4 <memchr+0x8>
 8006db6:	bd10      	pop	{r4, pc}

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <_realloc_r>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	4680      	mov	r8, r0
 8006dda:	4614      	mov	r4, r2
 8006ddc:	460e      	mov	r6, r1
 8006dde:	b921      	cbnz	r1, 8006dea <_realloc_r+0x16>
 8006de0:	4611      	mov	r1, r2
 8006de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de6:	f7ff bb93 	b.w	8006510 <_malloc_r>
 8006dea:	b92a      	cbnz	r2, 8006df8 <_realloc_r+0x24>
 8006dec:	f7ff fc88 	bl	8006700 <_free_r>
 8006df0:	4625      	mov	r5, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	f000 f81b 	bl	8006e32 <_malloc_usable_size_r>
 8006dfc:	4284      	cmp	r4, r0
 8006dfe:	4607      	mov	r7, r0
 8006e00:	d802      	bhi.n	8006e08 <_realloc_r+0x34>
 8006e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e06:	d812      	bhi.n	8006e2e <_realloc_r+0x5a>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff fb80 	bl	8006510 <_malloc_r>
 8006e10:	4605      	mov	r5, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0ed      	beq.n	8006df2 <_realloc_r+0x1e>
 8006e16:	42bc      	cmp	r4, r7
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	bf28      	it	cs
 8006e1e:	463a      	movcs	r2, r7
 8006e20:	f7ff ffca 	bl	8006db8 <memcpy>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4640      	mov	r0, r8
 8006e28:	f7ff fc6a 	bl	8006700 <_free_r>
 8006e2c:	e7e1      	b.n	8006df2 <_realloc_r+0x1e>
 8006e2e:	4635      	mov	r5, r6
 8006e30:	e7df      	b.n	8006df2 <_realloc_r+0x1e>

08006e32 <_malloc_usable_size_r>:
 8006e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e36:	1f18      	subs	r0, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfbc      	itt	lt
 8006e3c:	580b      	ldrlt	r3, [r1, r0]
 8006e3e:	18c0      	addlt	r0, r0, r3
 8006e40:	4770      	bx	lr
	...

08006e44 <_init>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr

08006e50 <_fini>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	bf00      	nop
 8006e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e56:	bc08      	pop	{r3}
 8006e58:	469e      	mov	lr, r3
 8006e5a:	4770      	bx	lr
